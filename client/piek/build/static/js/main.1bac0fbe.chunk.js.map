{"version":3,"sources":["components/LoginForm/index.js","hasura-queries/getOrders.js","components/PriorityLayout/tableLogic.js","hasura-queries/MutationOrderStatus.js","components/PreOrders/index.js","components/BaseHeader/index.js","hasura-queries/MutationOrder.js","components/BaseHeader/ActionsHeader.js","components/RecentlyLayout/index.js","components/RecentlyLayout/tableLogic.js","components/PriorityLayout/ManagerFilter.jsx","components/PriorityLayout/index.js","components/OrderLayout/queries/GetOrderByID.js","components/OrderLayout/queries/MutationOrderDocs.js","components/OrderLayout/OrderComposition.jsx","components/OrderLayout/Info.jsx","components/OrderLayout/queries/MutationOrderInfo.js","components/OrderLayout/EditableComponents/EditableInfo.jsx","components/OrderLayout/queries/MutationCheckListUnit.js","components/OrderLayout/CheckList.jsx","components/OrderLayout/Docs.jsx","components/OrderLayout/Comments.jsx","components/OrderLayout/Dropzone.js","components/OrderLayout/queries/MutationOrderItem.js","components/OrderLayout/EditableComponents/AddOrderItem.jsx","components/OrderLayout/index.jsx","components/Attendance/queries/getUsers.js","components/Attendance/functions.js","components/Attendance/table.js","components/Attendance/ReportConfigurator.jsx","components/Attendance/index.js","routers/PrivateRoute.js","routers/Router.js","components/BaseLayout/index.js","components/Sidebar/DarkToggle.js","components/Sidebar/Sidebar.js","App.js","reportWebVitals.js","http/index.js","services/AuthService.js","store/store.js","index.js"],"names":["LoginForm","props","useState","email","setEmail","password","setPassword","store","useContext","Context","history","useHistory","className","TextField","label","onChange","e","target","value","type","Button","variant","width","onClick","login","then","push","GetOrdersSubscription","gql","GET_USERS","setPaidPercent","total","paid","toFixed","columnsList","Header","id","accessor","_row","counter","data","OrderItems","length","to","OrderID","map","item","Name","OrderItemID","Quantity","order","moment","ShippingDate","format","InvoiceNumber","TotalAmount","PaidAmount","User","FirstName","Table","columns","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","headerGroup","i","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps","MUTATE_ORDER_STATUS","PreOrders","showPreOrders","setShowPreOrders","useMutation","mutationOrderStatus","dt","preOrders","handleToggle","growDiv","document","getElementById","clientHeight","style","height","newColumnList","variables","OrderStatus","splice","indexOf","onClickTransfer","Heading","BaseHeader","pageParams","icon","title","children","INSERT_ORDER","ActionsHeader","userID","createNewOrder","createOrderHandler","res","insert_erp_Orders","returning","editOrderHandler","setEditState","editState","createOrder","data-for","data-tip","addOrder","accessLevel","editOrderBtn","RecentlyLayout","orders","groupedData","erp_Orders","sort","a","b","forEach","ID","days","subtract","isAdded","day","CreatingDate","split","date","objs","name","groupOrders","useMemo","group","heading","preloader","managerFilterIndicator","managerFilter","ManagerFilter","dispatch","state","users","val","FormControl","Select","payload","disableUnderline","inputProps","MenuItem","user","UserID","LastName","incomingOrders","undefined","reducer","action","TabPanel","index","other","role","hidden","aria-labelledby","Box","p","Typography","component","a11yProps","PriorityLayout","useReducer","priorityTab","searchKeyword","filtredOrders","useQuery","useSubscription","onSubscriptionData","options","subscriptionData","fetchPolicy","nextFetchPolicy","loading","error","getPageParams","window","location","pathname","Tabs","event","newValue","setPriorutyTab","aria-label","indicatorColor","Tab","placeholder","trim","autoFocus","erp_Users","sword","result","filter","keyword","finded","rest","arg","toLowerCase","includes","filteringAlg","Entity","newOrders","ord","ManagerID","getFiltredData","GET_ORDER_BY_ID","PUSH_DOCS_ARRAY","DELETE_ORDER_FILE","OrderComposition","el","FullName","OrderMeta","OrderNumber","City","Comment","UPDATE_ORDER_INFO","fields","DateFormatCustom","inputRef","getInputRef","onValueChange","values","MoneyFormatCustom","prefix","thousandSeparator","EditableInfo","orderID","refetch","addField","updateOrderInfo","console","log","useEffect","defaultValue","autoComplete","InputProps","inputComponent","multiline","MUTATE_CHECKLIST_UNIT","CheckList","updateCheckListUnit","propsData","JSON","parse","stringify","Point","units","IsComplited","classList","toggle","CheckListUnitID","IsCompluted","toggleCheckListUnit","Docs","onUpload","open","setOpen","fileOnDelete","setFileOnDelete","deleteFileMutation","onFileDeleteInput","useRef","handleClose","deleteFile","current","Key","attachedFiles","file","handleClickOpen","FileName","downloadFile","files","path","onUploadFiles","Dialog","onClose","maxWidth","DialogContent","DialogContentText","margin","fullWidth","DialogActions","Comments","isFileOnDropzone","isDragActive","add","remove","INSERT_ORDER_ITEM","AddOrderItem","inserdOrderItem","quantity","fullName","mutate","size","OrderLayout","setOnUploadFiles","editStateQueryArg","URLSearchParams","useLocation","search","get","pushDocs","useParams","S3Upload","useCallback","acceptedFiles","uploadFile","status","m","key","originalname","useDropzone","onDrop","getRootProps","CheckListUnits","Info","daysInMonth","selectedMonth","month","year","Date","getDate","getIntervalData","intervals","timeDeduction","getMinutes","t","minutes","find","entrance","_entr","_exit","exit","getHours","number","hour","Math","floor","decpart","min","round","minute","convertInterval","interval","monthAdd","temp","getFullYear","getMonth","setMonth","setDate","ReportConfigurator","months","selectedMonthHandler","d","attributes","suitable","chooseMonth","parseInt","attendanceData","Attendance","Error","filtredData","toString","replace","gte","lte","getVarsForSubscription","onCompleted","attendance_users_aggregate","nodes","onChangeSearch","lastname","startsWith","firstname","Cell","hours","original","intervalsPools","generateColumns","PrivateRoute","Component","isLoaded","setisLoaded","isAuth","setisAuth","checkAuth","inMemoryToken","AppRouter","exact","BaseLayout","DARK_CLASS","DarkToggle","systemPrefersDark","useMediaQuery","query","prefersDark","setIsDark","isDark","documentElement","display","Sidebar","Pane","activeClassName","logout","observer","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","API_URL","process","$api","axios","create","withCredentials","baseURL","interceptors","request","use","config","Authorization","localStorage","getItem","response","originalRequest","_isRetry","setItem","accessToken","AuthService","post","Store","isLoading","alignItems","justifyContent","Spinner","makeAutoObservable","this","bool","token","setInMemoryToken","setUser","setAuth","message","removeItem","setLoading","formData","FormData","append","fetch","blob","downloadURL","URL","createObjectURL","link","createElement","href","download","body","appendChild","click","hasuraRes","url","createContext","webSocketLink","WebSocketLink","uri","reconnect","lazy","minTimeout","inactivityTimeout","connectionCallback","connectionParams","apolloClient","ApolloClient","cache","InMemoryCache","root","ReactDOM","client","sessionData","dataset","session","Provider"],"mappings":"6gBAqDeA,EA3CG,SAACC,GACf,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KAEOC,EAASC,qBAAWC,IAApBF,MACDG,EAAUC,cAUhB,OACI,mCACM,sBAAKC,UAAU,YAAf,UAEM,cAACC,EAAA,EAAD,CACAD,UAAU,aACVE,MAAM,QACNC,SAAU,SAAAC,GAAC,OAAIZ,EAASY,EAAEC,OAAOC,UAEnC,cAACL,EAAA,EAAD,CACEC,MAAM,WACNK,KAAK,WACLP,UAAU,aACVG,SAAU,SAAAC,GAAC,OAAIV,EAAYU,EAAEC,OAAOC,UAEtC,cAACE,EAAA,EAAD,CACER,UAAU,SACVS,QAAQ,WACRC,MAAM,QACNC,QAvBF,SAACP,GACbT,EAAMiB,MAAMrB,EAAOE,GAAUoB,MAAM,kBAAOf,EAAQgB,KAAK,SAkB3C,kD,8CC/BLC,EAAwBC,YAAH,+eA6BrBC,EAAYD,YAAH,6G,kCChCTE,EAAiB,SAACC,EAAOC,GAClC,OAAKD,GAAUC,EAGR,OAAUA,EAAKD,EAAS,KAAKE,QAAQ,GAAK,IAFtC,KAKFC,EAAc,CACvB,CACEC,OAAQ,GACRC,GAAI,QACJC,SAAU,SAACC,EAAWC,GAAZ,OAAwBA,EAAS,IAE7C,CACEJ,OAAQ,4BACRC,GAAI,aACJC,SAAU,SAAAG,GACR,OAA8B,GAA1BA,EAAKC,WAAWC,OAAoB,cAAC,IAAD,CAAMC,GAAE,kBAAaH,EAAKI,SAA1B,SAAqC,kFAEhE,cAAC,IAAD,CAAMD,GAAE,kBAAaH,EAAKI,SAA1B,SACZJ,EAAKC,WAAWI,KAAI,SAAAC,GAAI,OACvB,8BACE,+BAAOA,EAAKC,QADJD,EAAKE,oBAQrB,CACEb,OAAQ,kCACRE,SAAU,SAAAG,GAAI,OACdA,EAAKC,WAAWI,KAAI,SAAAC,GAAI,OACxB,8BACE,8BAAMA,EAAKG,YADHH,EAAKE,kBAKjB,CACEb,OAAQ,mDACRE,SAAU,SAACa,GAAD,OACV,yCAAKC,IAAOD,EAAME,cAAcC,OAAO,YAAvC,SAEF,CACElB,OAAQ,iEACRE,SAAU,SAAAG,GAAI,OAAIA,EAAKc,cAAgBxB,EAAeU,EAAKe,YAAaf,EAAKgB,cAE/E,CACErB,OAAQ,mDACRE,SAAU,UAEZ,CACEF,OAAQ,sBACRE,SAAU,QAEZ,CACEF,OAAQ,sBACRE,SAAU,SAAAG,GAAI,OAAI,qBAAK5B,UAAU,wBAAf,SAAwC4B,EAAKiB,KAAKC,UAAU,QAIrE,SAASC,EAAT,GAAoC,IAApBC,EAAmB,EAAnBA,QAASpB,EAAU,EAAVA,KAAMJ,EAAI,EAAJA,GAC1C,EAMMyB,mBAAS,CACXD,UACApB,SAPAsB,EADJ,EACIA,cACAC,EAFJ,EAEIA,kBACAC,EAHJ,EAGIA,aACAC,EAJJ,EAIIA,KACAC,EALJ,EAKIA,WAOJ,OAAmB,GAAf1B,EAAKE,OAAoB,KAG5B,mCACD,gDAAON,GAAIA,EAAIxB,UAAU,iBAAoBkD,KAA7C,cACE,gCACGE,EAAanB,KAAI,SAACsB,EAAaC,GAAd,OAChB,8CAAgBD,EAAYE,uBAA5B,aACGF,EAAYG,QAAQzB,KAAI,SAAC0B,EAAQH,GAAT,OACvB,8CAAQG,EAAOC,kBAAf,aAAkCD,EAAOE,OAAO,kBAF3CL,QAOb,iDAAWL,KAAX,aACGE,EAAKpB,KAAI,SAAC6B,EAAKN,GAEd,OADAF,EAAWQ,GAEN,8CAAQA,EAAIC,eAAZ,aACAD,EAAIE,MAAM/B,KAAI,SAACgC,EAAMT,GACpB,OAAO,8CAAQS,EAAKC,gBAAb,aAA8BD,EAAKJ,OAAO,6B,gBC5FpDM,EAAsBnD,YAAH,8N,2BCsDjBoD,G,OAjDG,SAAC/E,GACf,MAA0CC,oBAAS,GAAnD,mBAAO+E,EAAP,KAAsBC,EAAtB,KAEA,EAA8BC,sBAAYJ,GAAnCK,EAAP,oBAGIC,EAAKpF,EAAMqF,UAELC,EAAe,WAAO,IAAD,EACvBL,GAAkBD,GAClB,IAAIO,EAAUC,SAASC,eAAe,QACV,GAAxBF,EAAQG,aAAmBH,EAAQI,MAAMC,QAAS,UAAAJ,SAASC,eAAe,2BAAxB,eAA6CC,cAAe,GAAI,KACjHH,EAAQI,MAAMC,OAAS,GAWhCC,EAAa,YAAO5D,GASxB,OAPA4D,EAAcpE,KAAK,CACfS,OAAQ,IACRE,SAAU,SAAAG,GAAI,OACd,qBAAKjB,QAAS,kBAZU,SAACiB,GACvB4C,EAAoB,CAAEW,UAAW,CAAEnD,QAASJ,EAAKI,QAASoD,YAAa,KACvEX,EAAGY,OAAOZ,EAAGa,QAAQ1D,GAAO,GACX,GAAb6C,EAAG3C,QAAa6C,IASFY,CAAgB3D,IAAO5B,UAAU,gBAArD,SAAqE,cAAC,IAAD,SAKrE,mCAEA,sBAAKA,UAAWqE,EAAgB,6BAA+B,sBAA/D,UAEE,eAACmB,EAAA,EAAD,CAAU7E,QAASgE,EAAc3E,UAAU,kCAA3C,2EAAyF,+BAAM,cAAC,IAAD,SAG7F,qBAAKwB,GAAG,OAAR,SACE,cAACuB,EAAD,CAAOvB,GAAG,mBAAmBwB,QAASkC,EAAetD,KAAMvC,EAAMqF,qBCtChEe,EAbI,SAACpG,GAEhB,OACO,sBAAKW,UAAU,6BAAf,UACS,+BAAOX,EAAMqG,WAAWC,OACxB,cAACH,EAAA,EAAD,UAAUnG,EAAMqG,WAAWE,QAG1BvG,EAAMwG,aCTdC,EAAe9E,YAAH,4R,SCkDV+E,EA5CO,SAAC1G,GACnB,MAA0BkF,sBAAYuB,EAAc,CAACX,UAAW,CAC5D,UAAiB9F,EAAM2G,OACvB,cAAiB,EACjB,eAAkB,KAHdC,EAAR,oBAMMC,EAAqB,WACvBD,IAAiBpF,MAAM,SAACsF,GACpB9G,EAAMS,QAAQgB,KAAd,kBAA8BqF,EAAIvE,KAAKwE,kBAAkBC,UAAU,GAAGrE,QAAtE,mBAQFsE,EAAmB,WACrBjH,EAAMkH,cAAclH,EAAMmH,YAgB9B,OACI,sBAAKxG,UAAU,eAAf,UAPa,WAEb,GAAIX,EAAMoH,YACN,OAAO,qBAAKC,WAAS,SAASC,WAAS,mDAAWhG,QAASuF,EAAoBlG,UAAU,cAAlF,SAAgG,cAAC,IAAD,MAMtG4G,GAhBY,WACjB,GAAyB,GAArBvH,EAAMwH,YAAiB,CAEvB,OAAO,qBAAKH,WAAS,SAASC,WAAS,mDAAW3G,UADtBX,EAAMmH,UAAY,qBAAsB,cACU7F,QAAS2F,EAAhF,SAAkG,cAAC,IAAD,OAcxGQ,O,kBC6CEC,EA7EQ,SAAC,GAAY,IAAXnF,EAAU,EAAVA,KACjB8C,EAAY,GACZsC,EAAS,GACNrH,EAASC,qBAAWC,IAApBF,MACHsH,EAAc,KAEVrF,EAAKsF,aACLtF,EAAKsF,WAAWC,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAE7E,aAAe4E,EAAE5E,aAAe,GAAI,KAGrEZ,EAAKsF,WAAWI,SAAQ,SAAChF,GAEO,GAAxBA,EAAM8C,YAAYmC,GAClB7C,EAAU5D,KAAKwB,GAEe,GAAxBA,EAAM8C,YAAYmC,IACxBP,EAAOlG,KAAKwB,MAIpB2E,EC9Be,SAACD,GACxB,IAAIQ,EAAO,CAAC,CACR,KAAQ,6CACR,KAAQjF,MAASkF,SAAS,EAAG,OAAOhF,OAAO,cAC3C,KAAQ,IACR,CAAE,KAAQ,iCACV,KAAQF,MAASkF,SAAS,EAAG,OAAOhF,OAAO,cAC3C,KAAQ,IACR,CAAE,KAAQ,GACV,KAAQ,KAGZ,GAAIuE,EAAO,CAAC,IAAD,gBAEaA,GAFb,yBAEI1E,EAFJ,QAGCoF,GAAU,EAEdF,EAAKF,SAAS,SAACK,GACPrF,EAAMsF,aAAaC,MAAM,KAAK,KAAOF,EAAIG,MACzCH,EAAII,KAAKjH,KAAKwB,GACdoF,GAAU,GACS,KAAbC,EAAIK,MAAgBN,GAASC,EAAII,KAAKjH,KAAKwB,OAP7D,2BAA4B,IAFrB,+BAaX,OAAOkF,EDKeS,CAAYjB,IAGlC,IAAMhE,EAAUkF,mBACZ,kBAAM5G,IACN,IAIE6G,EAAQ,SAACvG,EAAMwG,GACjB,OAAmB,GAAfxG,EAAKE,OAAoB,KAGzB,qCACA,qBAAK9B,UAAU,gBAAf,SAAgCoI,IAC5B,qBAAKpI,UAAU,YAAf,SACA,cAAC+C,EAAD,CAAOC,QAASA,EAASpB,KAAMA,UAM3C,OACK,mCACIqF,EAEG,qCAECkB,EAAMlB,EAAY,GAAGc,KAAM,8CAC3BI,EAAMlB,EAAY,GAAGc,KAAM,kCAC3BI,EAAMlB,EAAY,GAAGc,KAAM,6DAoB5BpI,EAAM0I,a,2BElFRC,EAAyB,SAACC,GACpC,GAAqB,GAAjBA,EAAoB,OACpB,sBAAKvI,UAAU,0BAAf,UACI,qBAAKA,UAAU,WACf,uLAoCGwI,EA9BO,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MAElCC,EAAMF,EAAMH,cAId,OAAKI,EAGH,sBAAK3I,UAAU,qBAAf,UACA,sBAAMA,UAAU,oBAAhB,qBACA,cAAC6I,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CACEd,KAAK,gBACL1H,MAAOsI,EACPzI,SAXQ,SAACC,GAAD,OAAOqI,EAAS,CAAElI,KAAM,gBAAiBwI,QAAS3I,EAAEC,OAAOC,SAYnE0I,kBAAkB,EAClBC,WAAY,CAAE,UAAa,uBAL7B,UAOE,cAACC,EAAA,EAAD,CAAU5I,MAAO,EAAjB,gCACEqI,EAAM1G,KAAK,SAACkH,GAAD,OACb,eAACD,EAAA,EAAD,CAAW5I,MAAQ6I,EAAKC,OAAxB,wBAAyDD,EAAKrG,UAA9D,YAA2EqG,EAAKE,UAAhF,MAAsCF,EAAKC,mBAf9B,M,0FCGrBE,QAAiBC,EAErB,SAASC,GAAQd,EAAOe,GACpB,OAAQA,EAAOlJ,MACX,IAAK,SACL,IAAK,YACL,IAAK,cACL,IAAK,gBACL,IAAK,gBACL,IAAK,gBACD,OAAO,2BAAImI,GAAX,kBAAmBe,EAAOlJ,KAAOkJ,EAAOV,WAepD,SAASW,GAASrK,GACd,IAAQwG,EAAqCxG,EAArCwG,SAAUvF,EAA2BjB,EAA3BiB,MAAOqJ,EAAoBtK,EAApBsK,MAAUC,EAAnC,YAA6CvK,EAA7C,IAEA,OACE,6CACEwK,KAAK,WACLC,OAAQxJ,IAAUqJ,EAClBnI,GAAE,0BAAqBmI,GACvBI,kBAAA,qBAA+BJ,IAC3BC,GALN,aAOGtJ,IAAUqJ,GACT,cAACK,GAAA,EAAD,CAAKC,EAAG,EAAR,SACE,cAACC,GAAA,EAAD,CAAYC,UAAW,MAAvB,SAA+BtE,SAOzC,SAASuE,GAAUT,GACjB,MAAO,CACLnI,GAAG,cAAD,OAAgBmI,GAClB,gBAAgB,mBAAhB,OAAoCA,IAM1C,I,YAwGeU,GAxGQ,WACnB,IAAQ1K,EAAUC,qBAAWC,IAArBF,MAER,EAA0B2K,qBAAWd,GAAS,CAC1CxC,OAAQ,GACRtC,UAAW,GACX6F,YAAc5K,EAAM4K,YACpBC,cAAe,GACfjC,cAAe,EACfkC,cAAe,KANnB,mBAAO/B,EAAP,KAAcD,EAAd,KASe/D,GAA0BgE,EAAlC1B,OAAkC0B,EAA1BhE,WAAW6F,EAAe7B,EAAf6B,YAEpBzK,EAAUC,cAaViD,EAAUkF,mBACZ,kBAAM5G,IAAa,IAGvB,EAA4BoJ,mBAASzJ,GAA7BW,KAAM+G,OAAd,MAAsB,GAAtB,EAkCA,EAAsCgC,0BAAgB5J,EAAuB,CAAE6J,mBAjDpD,SAACC,GACxB,IAAI7D,EAAS,GAAQtC,EAAY,GACjCmG,EAAQC,iBAAiBlJ,KAAKsF,WAAWI,SAAS,SAAChF,GACnB,GAAxBA,EAAM8C,YAAYmC,GAAS7C,EAAU5D,KAAKwB,GACb,GAAxBA,EAAM8C,YAAYmC,IAASP,EAAOlG,KAAKwB,MAEpDgH,GAAiBtC,EACjByB,EAAS,CAAElI,KAAM,YAAawI,QAASrE,IACvC+D,EAAS,CAAElI,KAAM,SAAUwI,QAAS/B,KAyC2D+D,YAAa,oBAAqBC,gBAAiB,gBAAtJ,KAAQC,QAAR,EAAiBC,MAAjB,EAAwBtJ,aAAxB,MAA+B,GAA/B,EAEA,OACI,gCACI,cAAC,EAAD,CAAY8D,WAAe/F,EAAMwL,cAAcC,OAAOC,SAASC,UAA/D,SACI,cAAC,EAAD,CAAe7E,YAAa,EAAGT,OAAQrG,EAAMwJ,KAAKC,OAAQtJ,QAASA,MAG/D,cAAC,EAAD,CAAW4E,UAAcA,IAEzB,qBAAM1E,UAAU,eAAhB,SACI,eAACuL,GAAA,EAAD,CAAMjL,MAAOiK,EAAapK,SA3C3B,SAACqL,EAAOC,GACvBhD,EAAS,CAAElI,KAAM,cAAewI,QAAQ0C,IACxC9L,EAAM+L,eAAeD,IAyC2CE,aAAW,sBAAuBC,eAAe,UAAjG,UACI,cAACC,GAAA,EAAD,aAAK3L,MAAM,sEAAkBkK,GAAU,KACvC,cAACyB,GAAA,EAAD,aAAK3L,MAAM,oDAAekK,GAAU,UAK5C,cAACV,GAAD,CAAUpJ,MAAOiK,EAAaZ,MAAO,EAArC,SACI,sBAAK3J,UAAU,YAAf,UAEI,sBAAKA,UAAU,mBAAf,UACI,cAAC,IAAD,CAAWA,UAAU,gBACrB,uBAAOO,KAAK,OAAOuL,YAAY,uLAAsC3L,SAzB3E,SAACC,GAAD,OAAOqI,EAAS,CAAElI,KAAM,gBAAiBwI,QAAS3I,EAAEC,OAAOC,MAAMyL,UAyBmCC,WAAS,IACvG,cAAC,EAAD,CAAevD,SAAUA,EAAUC,MAAOA,EAAOC,MAAOA,EAAMsD,UAAW3C,eAAgBA,QAGxFhB,EAAuBI,EAAMH,eAEjCe,IAAkB,cAACvG,EAAD,CAAOC,QAAYA,EAAUpB,KAxDjD,WACnB,IAAMsK,EAAQxD,EAAM8B,cAChB2B,EAAS,GAUb,GANIA,EADU,KAAVD,EACS5C,GAAe8C,QAAQ,SAAC9J,GAAD,OAnF5C,SAAsB+J,GAAiB,IACnC,IAAIC,GAAS,EADsB,mBAALC,EAAK,iCAALA,EAAK,kBAMnC,OAJAA,EAAKtK,KAAK,SAACuK,GACHA,GAAOA,EAAIC,cAAcC,SAASL,EAAQI,iBAAgBH,GAAS,QAGvEA,EA6E+CK,CAAaT,EAAO5J,EAAMI,cAAeJ,EAAMsK,WAEhFtD,GAIa,GAAvBZ,EAAMH,cAAmB,CACzB,IAAIsE,EAAY,GAIhB,OAHAV,EAAOlK,KAAK,SAAC6K,GACLA,EAAIC,WAAarE,EAAMH,eAAesE,EAAU/L,KAAKgM,MAEtDD,EAEN,OAAOV,EAqCiEa,UAIjE,cAACtD,GAAD,CAAUpJ,MAAOiK,EAAaZ,MAAO,EAAG3J,UAAU,iBAAlD,SACI,cAAC,EAAD,CAAgB4B,KAAMA,U,UC5KjCqL,GAAkBjM,YAAH,yrBCAfkM,GAAkBlM,YAAH,4KAUfmM,GAAoBnM,YAAH,sLCcfoM,GAzBU,SAAC/N,GAEtB,OAAO,mCACEA,EAAMuC,KAAKK,KAAK,SAAAoL,GAAE,OAEf,sBAA0BrN,UAAU,OAApC,UAGI,sBAAKA,UAAU,WAAf,UAEI,sBAAKA,UAAU,OAAf,cAAwBqN,EAAGlL,KAA3B,OACA,uBAAOnC,UAAU,WAAjB,cAA8BqN,EAAGhL,eAIrC,sBAAMrC,UAAU,WAAhB,cAA8BqN,EAAGC,cAV3BD,EAAGjL,mB,UCyDdmL,I,OA1DG,SAAClO,GAEjB,OACE,sBAAKW,UAAU,OAAf,UAEE,sBAAKA,UAAU,kBAAf,UACM,gCACI,6GACCuC,IAAOlD,EAAMuC,KAAKY,cAAcC,OAAO,eAE5C,gCACI,kGACC,UACDpD,EAAMuC,KAAKc,cACXxB,EAAe7B,EAAMuC,KAAKe,YAAatD,EAAMuC,KAAKgB,YAC9C,sBAAM5C,UAAU,iBAAhB,SACI,cAAC,KAAD,YAKlB,sBAAKA,UAAU,cAAf,UACK,sBAAKA,UAAU,OAAf,UACK,gCACI,sGACCX,EAAMuC,KAAK4L,eAEhB,gCACI,uEACCnO,EAAMuC,KAAKY,gBAEhB,gCACI,mFACCnD,EAAMuC,KAAKiB,KAAKC,UAFrB,IAEiCzD,EAAMuC,KAAKiB,KAAKwG,eAItD,sBAAKrJ,UAAU,QAAf,UACS,gCACI,wEACCX,EAAMuC,KAAKgL,UAEhB,gCACI,qDACCvN,EAAMuC,KAAK6L,cAK9B,sBAAKzN,UAAU,eAAf,UACM,qGACCX,EAAMuC,KAAK8L,gBCtDXC,I,OAAoB3M,YAAH,wM,gECQ1B4M,GAAS,GAGb,SAASC,GAAiBxO,GACxB,IAAQyO,EAAiCzO,EAAjCyO,SAAU3N,EAAuBd,EAAvBc,SAAayJ,EAA/B,YAAyCvK,EAAzC,IAEA,OACE,cAAC,KAAD,2BACMuK,GADN,IAEEmE,YAAaD,EACbE,cAAe,SAAAC,GACb9N,EAAS,CACPE,OAAQ,CACN2H,KAAM3I,EAAM2I,KACZ1H,MAAO2N,EAAO3N,UAIpBmC,OAAO,cAKb,SAASyL,GAAkB7O,GACzB,IAAQyO,EAAiCzO,EAAjCyO,SAAU3N,EAAuBd,EAAvBc,SAAayJ,EAA/B,YAAyCvK,EAAzC,IAEA,OACE,cAAC,KAAD,2BACMuK,GADN,IAEEmE,YAAaD,EACbE,cAAe,SAAAC,GACb9N,EAAS,CACPE,OAAQ,CACN2H,KAAM3I,EAAM2I,KACZ1H,MAAO2N,EAAO3N,UAIpB6N,OAAQ,UACRC,mBAAmB,KAKzB,I,SAuGeC,GAvGM,SAAC,GAAgC,IAA9BzM,EAA6B,EAA7BA,KAAM0M,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,QAE7BC,EAAW,SAACpO,GAAD,OAAOwN,GAAOxN,EAAEC,OAAO2H,MAAQ5H,EAAEC,OAAOC,OACzD,EAA0BiE,sBAAYoJ,IAA/Bc,EAAP,oBAaF,OAXEC,QAAQC,IAAIpM,IAAOX,EAAKY,cAAcC,OAAO,aAC7CmM,qBAAU,WACN,OAAO,WACHH,EAAgB,CAACtJ,UAAW,CAC5BmJ,UACAV,aAEAW,OAEL,IAGH,uBAAMvO,UAAU,oBAAhB,UAGI,cAACC,EAAA,EAAD,CACEC,MAAM,6EACN8H,KAAK,eACL6G,aAActM,IAAOX,EAAKY,cAAcC,OAAO,YAC/CtC,SAAU,SAACC,GACTA,EAAEC,OAAOC,MAAQiC,IAAOnC,EAAEC,OAAOC,MAAO,YAAYmC,OAAO,cAC3D+L,EAASpO,IAEX0L,YAAY,WACZgD,aAAa,MACbC,WAAY,CACVC,eAAgBnB,MAIpB,cAAC5N,EAAA,EAAD,CACEC,MAAM,gEACNK,KAAK,SAELyH,KAAK,gBACL6G,aAAcjN,EAAKc,cACnBvC,SAAUqO,IAGZ,cAACvO,EAAA,EAAD,CACEC,MAAM,sEACNK,KAAK,SAELyH,KAAK,cACL6G,aAAcjN,EAAK4L,YACnBrN,SAAUqO,IAGX,cAACvO,EAAA,EAAD,CACCC,MAAM,wCACN4O,aAAa,MACb9G,KAAK,SACL6G,aAAcjN,EAAKgL,OACnBzM,SAAUqO,IAGZ,cAACvO,EAAA,EAAD,CACEC,MAAM,iCACN4O,aAAa,MACb9G,KAAK,OACL6G,aAAcjN,EAAK6L,KACnBtN,SAAUqO,IAGX,cAACvO,EAAA,EAAD,CACCC,MAAM,sEACN8H,KAAK,cACL6G,aAAcjN,EAAKe,YACnBmM,aAAa,MACb3O,SAAUqO,EACVO,WAAY,CACVC,eAAgBd,MAIpB,cAACjO,EAAA,EAAD,CACEC,MAAM,mDACN8H,KAAK,aACL6G,aAAcjN,EAAKgB,WACnBkM,aAAa,MACb3O,SAAUqO,EACVO,WAAY,CACVC,eAAgBd,MAIpB,cAACjO,EAAA,EAAD,CACEC,MAAM,qEACN+O,WAAS,EACTH,aAAa,MACb9G,KAAK,UACL6G,aAAcjN,EAAK8L,QACnBvN,SAAUqO,QCrJPU,GAAwBlO,YAAH,uRC8BnBmO,GA7BG,SAAC,GAAY,IAAXvN,EAAU,EAAVA,KAEhB,EAA2C2C,sBAAY2K,IAAvD,mBAAOE,EAAP,KAEIC,GAFJ,KAA8BpE,QAEdqE,KAAKC,MAAMD,KAAKE,UAAU5N,KAE1CyN,EAAUlI,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEoI,MAAQrI,EAAEqI,MAAQ,GAAK,KAElD,IAKMC,EAAQL,EAAUpN,KAAI,SAAAoL,GAAE,OACtB,qBAAKrN,UAAYqN,EAAGsC,YAAc,0BAA4B,gBAE1DhP,QAAU,SAAAN,GAAM,OARA,SAACA,EAAQgN,GACjChN,EAAOA,OAAOuP,UAAUC,OAAO,aAC/BT,EAAoB,CAAEjK,UAAW,CAAE2K,gBAAiBzC,EAAGyC,gBAAiBC,aAAc1C,EAAGsC,eAM7DK,CAAoB3P,EAAQgN,IAFpD,SAGKA,EAAGoC,OAFCpC,EAAGyC,oBAOpB,OACI,qBAAK9P,UAAU,YAAf,SACK0P,K,wCCgEEO,GAlFF,SAAC,GAA4C,IAA1CrO,EAAyC,EAAzCA,KAAMsO,EAAmC,EAAnCA,SAAU1J,EAAyB,EAAzBA,UAAW+H,EAAc,EAAdA,QAC/B5O,EAAUC,qBAAWC,IAArBF,MAER,EAAwBL,oBAAS,GAAjC,mBAAO6Q,EAAP,KAAaC,EAAb,KACA,EAAwC9Q,qBAAxC,mBAAO+Q,EAAP,KAAqBC,EAArB,KACA,EAA6B/L,sBAAY4I,IAAlCoD,EAAP,oBAEMC,EAAoBC,mBAOpBC,EAAc,kBAAMN,GAAQ,IAS5BO,EAAU,uCAAG,sBAAAvJ,EAAA,yDAEfsJ,IAEuC,gBAAnCF,EAAkBI,QAAQtQ,MAJf,gCAKLX,EAAMgR,WAAWN,EAAaQ,IAAKN,GAL9B,OAMXhC,IANW,2CAAH,qDAUVuC,EAAgBlP,EAAKK,KACvB,SAAA8O,GACI,OAAIvK,EACA,8BACI,sBAAK7F,QAAU,kBA5BP,SAACoQ,GACrBT,EAAgBS,GAChBX,GAAQ,GA0ByBY,CAAgBD,IACjC/Q,UAAU,wBADd,cACwC+Q,EAAKE,SAD7C,QADMF,EAAKF,KAMf,sBAAKlQ,QAAU,kBAAMhB,EAAMuR,aAAaH,IAEpC/Q,UAAU,YAFd,cAE4B+Q,EAAKE,SAFjC,MACSF,EAAKF,QAK1B,OACI,sBAAK7Q,UAAU,OAAf,UACK8Q,EAlCa,WAClB,GAAuB,GAAnBZ,EAASpO,OAAa,OAAO,KACjC,IAAMqP,EAAQjB,EAASjO,KAAI,SAAA8O,GAAI,OAAI,8BAAsBA,EAAKK,MAAjBL,EAAKK,SAElD,OAAO,qBAAKpR,UAAU,eAAf,SAA+BmR,IAgCjCE,GAED,8BACI,eAACC,GAAA,EAAD,CAAQnB,KAAMA,EAAMoB,QAASb,EAAa3G,kBAAgB,oBAAoByH,SAAS,KAAvF,UACI,eAACC,GAAA,EAAD,WACI,eAACC,GAAA,EAAD,0LACoC,sCAAOrB,QAAP,IAAOA,OAAP,EAAOA,EAAcY,WADzD,MAC4E,uBAD5E,kWAKA,cAAChR,EAAA,EAAD,CACI+L,WAAS,EACT2F,OAAO,QACPC,WAAS,EACT9C,aAAa,MACbhB,SAAU0C,OAGlB,cAACqB,GAAA,EAAD,UACI,cAACrR,EAAA,EAAD,CAAQG,QAASgQ,EAAY3Q,UAAU,oBAAvC,2OCzET8R,GAPE,SAACzS,GAEd,OACI,yB,UCDK0S,GAAmB,SAACC,GAAkB,IAAD,EAC1C3E,EAAKxI,SAASC,eAAe,YAEjC,GAAIkN,EAEA,OADA3E,EAAGuC,UAAUqC,IAAI,gBACV,cAAC,KAAD,CAAgBjS,UAAU,mBAC5B,OAAFqN,QAAE,IAAFA,GAAA,UAAAA,EAAIuC,iBAAJ,SAAesC,OAAO,iB,mBCNpBC,GAAoBnR,YAAH,gTC0EfoR,GArEM,SAAC,GAAmC,IAAlC5L,EAAiC,EAAjCA,UAAW8H,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,QACvC,EAAuChK,sBAAY4N,IAAnD,mBAAOE,EAAP,KAEMrK,GAFN,KAA0BiD,QAEbwF,iBAAO,OACd6B,EAAW7B,iBAAO,MAClB8B,EAAW9B,iBAAO,MAGlB+B,EAAS,WACmB,IAA1BF,EAAS1B,QAAQtQ,OACjB+R,EAAgB,CAAClN,UAAW,CACxBmJ,UAAStG,KAAMA,EAAK4I,QAAQtQ,MAC5BgS,SAAUA,EAAS1B,QAAQtQ,MAC3BiS,SAAUA,EAAS3B,QAAQtQ,SAAWO,MAAM,kBAAM0N,OAI1DvG,EAAK4I,QAAQtQ,MAAM,KACnBgS,EAAS1B,QAAQtQ,MAAM,KACvBiS,EAAS3B,QAAQtQ,MAAM,MA4C3B,OAAKkG,EAGD,qBAAKxG,UAAU,eAAf,SA3CA,qCACI,cAACC,EAAA,EAAD,CACIwS,KAAK,QACLzS,UAAU,OACVE,MAAM,2EACN4O,aAAa,MACbhB,SAAU9F,IAGd,cAAC/H,EAAA,EAAD,CACIwS,KAAK,QACLzS,UAAU,WACVE,MAAM,kCACNK,KAAK,SACLuN,SAAUwE,EACVxD,aAAa,QAMlB,cAAC7O,EAAA,EAAD,CACKC,MAAM,gHACNF,UAAU,WACViP,WAAS,EACTH,aAAa,MACb9G,KAAK,UAEL8F,SAAUyE,IAGd,qBAAKvS,UAAU,gCACXW,QAAS6R,EADb,SACqB,cAAC,KAAD,WAQN,MCqDZE,GA/FK,SAACrT,GACjB,IAAOM,EAASC,qBAAWC,IAApBF,MACP,EAA0CL,mBAAS,IAAnD,mBAAO+R,EAAP,KAAsBsB,EAAtB,KAEMC,EAAoB,IAAIC,gBAAgBC,cAAcC,QAAQC,IAAI,QACxE,EAAkC1T,mBAASsT,GAA3C,mBAAOpM,EAAP,KAAkBD,EAAlB,KACA,EAAmBhC,sBAAY2I,IAAxB+F,EAAP,oBACM3E,EAAU4E,cAAY1R,GAItB2R,EAAWC,uBAAY,SAAAC,GACzBV,EAAiBU,GAEjB1T,EAAM2T,WAAWD,GAAexS,MAC5B,SAACsF,GACG,GAAkB,KAAdA,EAAIoN,OAAe7E,QAAQC,IAAI,4BAC/B,CAEA,IADA,IAAI6E,EAAI,GACChQ,EAAE,EAAIA,EAAE2C,EAAIvE,KAAKE,OAAQ0B,GAAI,EAClCgQ,EAAE1S,KAAK,CACH,IAAOqF,EAAIvE,KAAK4B,GAAGiQ,IACnB,QAAWnF,EACX,SAAYnI,EAAIvE,KAAK4B,GAAGkQ,eAGhCT,EAAS,CAAE9N,UAAW,CAAC,QAAWqO,KAEtCb,EAAiB,IACjBpE,SAIP,IAEH,EAA8C7D,mBAASuC,GAAiB,CAAGlC,YAAa,WAAY5F,UAAW,CAAEnD,QAASsM,KAAnHrD,EAAP,EAAOA,QAAP,KAAgBC,MAAhB,EAAuBtJ,aAAvB,MAA8B,GAA9B,EAAkC2M,EAAlC,EAAkCA,QAElC,EAAqCoF,aAAY,CAAC3T,UAAW,WAAY4T,OAAQT,IAA1EU,EAAP,EAAOA,aAAc7B,EAArB,EAAqBA,aAQvB,OAFAtD,QAAQC,MAGR,qCACKoD,GAAiBC,GAGhB/G,EAsCItL,EAAM0I,UAtCC,qCAEb,sBAAKrI,UAAU,cAAf,UACI,eAACwF,EAAA,EAAD,WAAU5D,EAAKsF,WAAW,GAAG0F,OAA7B,QAA0ChL,EAAKsF,WAAW,GAAGuG,QAE7D,cAAC,EAAD,CACA5G,YAAe,EACfN,aAAgBA,EAChBC,UAAaA,OAIjB,kDAASxG,UAAU,eAAkB6T,KAArC,IAAqDrS,GAAG,WAAxD,UAEY,sBAAKxB,UAAU,OAAf,UAEA,sBAAKA,UAAU,cAAf,UACI,cAAC,GAAD,CAAkB4B,KAAMA,EAAKsF,WAAW,GAAGrF,aAC3C,cAAC,GAAD,CAAc2E,UAAWA,EAAW8H,QAASA,EAASC,QAASA,OAG/D,sBAAKvO,UAAU,gBAAf,UACI,cAAC,GAAD,CAAW4B,KAAMA,EAAKsF,WAAW,GAAG4M,iBACpC,cAAC,GAAD,CAAMlS,KAAMA,EAAKsF,WAAW,GAAG+I,KAC3BC,SAAUmB,EACV7K,UAAaA,EACb+H,QAASA,OAEjB,cAAC,GAAD,OAGH/H,EAAY,cAAC,GAAD,CAAc5E,KAAMA,EAAKsF,WAAW,GAAIoH,QAASA,EAASC,QAASA,IAAa,cAACwF,GAAD,CAAMnS,KAAMA,EAAKsF,WAAW,GAAIV,UAAaA,eC3GjJvF,GAAYD,YAAH,6YCDf,SAASgT,GAAaC,GAEvB,kBAAsBA,EAAtB,GAAOC,EAAP,KAAcC,EAAd,KACA,OAAO,IAAIC,KAAKD,EAAMD,EAAM,EAAG,GAAGG,UCmDxC,SAASC,GAAgB3M,EAAK4M,EAAWC,GAuBrC,SAASC,EAAWC,GAChB,IAAMC,EAAUD,EAAED,aAClB,OAAQE,EAAU,GAAX,WAAqBA,GAAYA,EAG5C,IAAMvU,EAAImU,EAAUK,MAAK,SAAAvH,GAAE,OAAK,IAAI+G,KAAK/G,EAAGwH,UAAUR,WAAa1M,KAEnE,GAAIvH,EAAG,CACH,IAAM0U,EAAQ,IAAIV,KAAKhU,EAAEyU,UACnBE,EAAQ,IAAIX,KAAKhU,EAAE4U,MAMzB,MAAO,CAJUF,EAAMG,WAAW,IAAKR,EAAWK,GACrCC,EAAME,WAAW,IAAKR,EAAWM,GAhClD,SAAyBG,EAAQV,GAE7BU,GAAUV,EAAc,GAExB,IAAIW,EAAOC,KAAKC,MAAMH,GAClBI,EAAUJ,EAASC,EACnBI,EAAM,EAAI,GAGdD,EAAUC,EAAMH,KAAKI,MAAMF,EAAUC,GACrC,IAAIE,EAASL,KAAKC,MAAgB,GAAVC,GAAgB,GAOxC,OAJIG,EAAO3T,OAAS,IAChB2T,EAAS,IAAMA,GAGZN,EAAO,IAAMM,EAgBHC,CAAgBtV,EAAEuV,SAAUnB,GAEXpU,EAAEmT,QAC/B,MAAO,CAAC,KAAM,KAAM,KAAM,MAGxB,SAASxQ,GAAT,GAA2C,IAA3BC,EAA0B,EAA1BA,QAASpB,EAAiB,EAAjBA,KAAM5B,EAAW,EAAXA,UAC1C,EAMMiD,mBAAS,CACXD,UACApB,SAPAsB,EADJ,EACIA,cACAC,EAFJ,EAEIA,kBACAC,EAHJ,EAGIA,aACAC,EAJJ,EAIIA,KACAC,EALJ,EAKIA,WAOL,OACE,mCACD,gDAAOtD,UAAWA,GAAekD,KAAjC,cACE,gCACGE,EAAanB,KAAI,SAACsB,EAAaC,GAAd,OAChB,8CAAgBD,EAAYE,uBAA5B,aACGF,EAAYG,QAAQzB,KAAI,SAAC0B,EAAQH,GAAT,OACvB,8CAAQG,EAAOC,kBAAf,aAAkCD,EAAOE,OAAO,kBAF3CL,QAOb,iDAAWL,KAAX,aACGE,EAAKpB,KAAI,SAAC6B,EAAKN,GAEd,OADAF,EAAWQ,GAEL,8CAAQA,EAAIC,eAAZ,aACCD,EAAIE,MAAM/B,KAAI,SAACgC,EAAMT,GACpB,OAAO,8CAAQS,EAAKC,gBAAb,aAA8BD,EAAKJ,OAAO,6B,OC/HnE,SAAS+R,GAAS9N,EAAMoM,GAEpB,IAAI2B,EAAO/N,EAQX,OAPA+N,EAAO,IAAIzB,KAAKtM,EAAKgO,cAAehO,EAAKiO,WAAY,IAChDC,SAASH,EAAKE,YAAc7B,EAAQ,IACzC2B,EAAKI,QAAQJ,EAAKxB,UAAY,GAE1BvM,EAAKuM,UAAYwB,EAAKxB,WACtBwB,EAAKI,QAAQnO,EAAKuM,WAEfwB,EAGX,IAmDeK,GAnDY,SAAC,GAAyB,IAAvBxN,EAAsB,EAAtBA,MAAOD,EAAe,EAAfA,SAC3BX,EAAO,IAAIsM,KACX+B,EAAS,CAAC,qBAAO,qBAAO,qBAAO,qBAAO,qBAAO,qBAAO,qBAAO,qBAAO,qBAAO,qBAAO,qBAAO,sBAEvFC,EAAuB,SAAChW,GAC1B,IAAMiW,EAAI,IAAIjC,KAAKhU,EAAEC,OAAOiW,WAAWxO,KAAKxH,OAC5CmI,EAAS,CAAClI,KAAM,gBAAiBwI,QAAS,CAACsN,EAAEN,WAAYM,EAAEP,kBAwB/D,OACI,sBAAK9V,UAAU,qBAAf,UAfgB,WAGhB,IAFA,IAAMwT,EAAI,GAEDhQ,EAAE,EAAGA,EAAG,EAAGA,IAAK,CACrB,IAAM+S,EAAWX,GAAS9N,GAAOtE,GACjCgQ,EAAE1S,KACE,sBAAKH,QAASyV,EACVpW,UAAWuW,EAASR,YAAcrN,EAAMuL,cAAc,GAAK,SAAW,GACtEnM,KAAMyO,EAFV,cAEsBJ,EAAOI,EAASR,YAFtC,QAKR,OAAO,qBAAK/V,UAAU,cAAf,SAA8BwT,IAKpCgD,GAED,qBAAKxW,UAAU,YAAf,SACI,sBAAKA,UAAU,OAAf,UACI,4DACA,uBAAOO,KAAK,OAAOsO,aAAcnG,EAAM8L,cAAerU,SA5BrC,SAACC,GAC1BqI,EAAS,CACLlI,KAAM,gBACNwI,QAAS0N,SAASrW,EAAEC,OAAOC,MAAMyL,aA0B7B,+DChCZ2K,GAAiB,KA0FNC,GAxFI,SAAAtX,GACf,IAAMyI,EAAO,IAAIsM,KACTzU,EAAUC,qBAAWC,IAArBF,MAmBR,MAA0B2K,sBAjB1B,SAAiB5B,EAAOe,GACpB,OAAQA,EAAOlJ,MAEb,IAAK,gBAGL,IAAK,gBAGL,IAAK,cACH,OAAO,2BAAKmI,GAAZ,kBAAoBe,EAAOlJ,KAAOkJ,EAAOV,UAE3C,QACE,MAAM,IAAI6N,SAI4B,CAC1CpC,cAAe,GACfP,cAAe,CAACnM,EAAKiO,WAAW,EAAGjO,EAAKgO,iBAF5C,mBAAOpN,EAAP,KAAcD,EAAd,KAIQ+L,EAA8C9L,EAA9C8L,cAAeP,EAA+BvL,EAA/BuL,cAAe4C,EAAgBnO,EAAhBmO,YAGtC,EHvCG,SAAgC5C,GACrC,kBAAsBA,EAAtB,GAAOC,EAAP,KAAcC,EAAd,KAKMX,GAHGiD,SAASvC,GAAO,GAAG4C,WAGhBC,QAAQ,oBAAqB,SAIzC,MAAO,CAACC,IAFI7C,EAAM,IAAKX,EAAG,eAEbyD,IADD9C,EAAM,IAAKX,EAAG,IAAKQ,GAAYC,GAAgB,aG8BpCiD,CAAuBjD,GAApC+C,EAAR,EAAQA,IAAKC,EAAb,EAAaA,IACOvM,mBAASzJ,GAAW,CAAEkE,UAAW,CAAE6R,MAAKC,OAAOE,YAAa,SAACtM,GAC7E6L,GAAiB7L,EAAQuM,2BAA2BC,MACpD5O,EAAS,CAAElI,KAAM,cAAewI,QAAS2N,QAFrCzL,QAKR2D,qBAAU,WACN,OAAO,WACH8H,GAAiB,QAEtB,IAQH,IAAMY,EAAiB,SAAClX,GACpB,IAAMiM,EAAUjM,EAAEC,OAAOC,MAAMyL,OAE3B,GAAgB,KAAZM,EAAgB,CAClB,IAAMF,EAASuK,GAAetK,QAAO,SAACjD,GAAD,OAV/C,SAAsBA,EAAMkD,GACxB,QAAIlD,EAAKoO,SAAS9K,cAAc+K,WAAWnL,EAAQI,kBAC1CtD,EAAKsO,UAAUhL,cAAc+K,WAAWnL,EAAQI,eAQJE,CAAaxD,EAAMkD,MAClE5D,EAAS,CAAElI,KAAM,cAAewI,QAASoD,SACpC1D,EAAS,CAAElI,KAAM,cAAewI,QAAS2N,MAGlD1T,EAAUkF,mBACZ,kBF1ED,SAAyB+L,EAAeO,GA2B7C,IA1BA,IAAIlT,EAAc,CACd,CACAC,OAAQ,yDACRE,SAAU,SAAAG,GAAI,OACd,gCACE,iCAAOA,EAAK2V,SAAZ,OACA,iCAAO3V,EAAK6V,UAAZ,YAGJ,CACElW,OAAQ,iCACRmW,KAAM,SAAA5T,GACJ,IAAI6T,EAAQ,EACNpD,EAAYzQ,EAAIA,IAAI8T,SAASC,eAQnC,OAPAtD,EAAUjN,SAAS,SAAAqO,GACjBgC,GAAShC,EAASA,YAIpBgC,GAASnD,EAAc,GAAKD,EAAUzS,OAE/B,8BAAM6V,EAAMtW,QAAQ,QAKxBsG,EAAI,EAAGA,GAAMqM,GAAYC,GAAgBtM,IAChDrG,EAAYR,KAAK,CACfS,OAAQoG,EAAImP,WACZY,KAAM,SAAA5T,GACJ,IAEA,EAA2CwQ,GAF9BxQ,EAAIH,OAAOpC,OAEyCuC,EAAIA,IAAI8T,SAASC,eAAgBrD,GAAlG,mBAAOK,EAAP,KAAiBG,EAAjB,KAAuBW,EAAvB,KAAiCpC,EAAjC,KAEA,OACE,sBAAKvT,UAAW,UAAWuT,EAA3B,UACE,qBAAKvT,UAAU,YAAf,SAA6B6U,IAC7B,qBAAK7U,UAAU,YAAf,SAA6BgV,IAC7B,qBAAKhV,UAAU,WAAf,SAA4B2V,UAOtC,OAAOrU,EE4BKwW,CAAgB7D,EAAeO,KAAgB,CAACP,EAAeO,IAGzE,OACI,qCACI,cAAC,EAAD,CAAY9O,WAAe/F,EAAMwL,cAAcC,OAAOC,SAASC,UAAYyH,OAAQuE,IACnF,cAAC,GAAD,CAAoB5O,MAAOA,EAAOD,SAAUA,IAEhD,sBAAKzI,UAAU,YAAf,UAEI,sBAAKA,UAAU,mBAAf,UACI,cAAC,IAAD,CAAWA,UAAU,gBACrB,uBAAOO,KAAK,OAAOuL,YAAY,uLAAsC3L,SAAW,SAACC,GAAD,OAAOkX,EAAelX,IAAK4L,WAAS,OAGvH6K,GAAe7T,GAAW,cAAC,GAAD,CAAOA,QAAWA,EAASpB,KAAQiV,EAAa7W,UAAU,qBAGpF,sBAAKA,UAAU,qBAAf,UACG,qBAAKA,UAAU,aAAf,8IACA,qBAAKA,UAAU,aAAf,mIACA,uBAAMA,UAAU,aAAhB,yDACciU,EAAc,GAAK,EADjC,mCAC2CA,EAAc,GADzD,yC,iBC1DD8D,GApCM,SAAC,GAAqC,IAAzBC,EAAwB,EAAnC7N,UAAyBoC,EAAU,kBAEtD,EAAgCjN,wBAASiK,GAAzC,mBAAO0O,EAAP,KAAiBC,EAAjB,KACA,EAA4B5Y,wBAASiK,GAArC,mBAAO4O,EAAP,KAAeC,EAAf,KAEQzY,EAAUC,qBAAWC,IAArBF,MAL8C,4CAOtD,4BAAAyH,EAAA,sEACsBzH,EAAM0Y,YAD5B,OACUlS,EADV,OAEIiS,EAAUjS,EAAIgS,QACdD,EAAY/R,EAAI8R,UAHpB,4CAPsD,sBAqBxD,OARErJ,qBAAU,WACJjP,EAAM2Y,eACRF,GAAU,GACVF,GAAY,IAhBsC,mCAkB/CG,KACF,IAGL,cAAC,IAAD,2BACM9L,GADN,IAEE1I,OAAQ,SAAAxE,GACN,GAAI4Y,EACA,OAAIE,EAAe,cAACH,EAAD,eAAe3Y,IACtB,cAAC,IAAD,CAAU0C,GAAG,gBCFtBwW,GArBG,SAAClZ,GAEf,OACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAO+R,KAAK,SAASjH,UAAW/K,IAChC,cAAC,GAAD,CAAcoZ,OAAK,EAACpH,KAAK,IAAIjH,UAAWE,KACxC,cAAC,GAAD,CAAc+G,KAAK,YAAYjH,UAAWpD,IAC1C,cAAC,GAAD,CAAcqK,KAAK,cAAcjH,UAAWwM,KAG5C,cAAC,GAAD,CAAcvF,KAAK,cAAcjH,UAAWuI,KAPhD,mCAUI,cAAC,IAAD,CAAU3Q,GAAG,UCPV0W,GAZI,SAACpZ,GAChB,OACI,mCACI,sBAAKW,UAAU,iBAAf,UAEQ,cAAC,GAAD,IACCX,EAAMwG,e,mGCLnB6S,GAAa,OAERC,GAAa,SAACtZ,GAEvB,IAAMuZ,EAAoBC,yBACtB,CACIC,MAAO,qCAEXvP,GACA,SAAAwP,GACAC,EAAUD,MAId,EAA4BzZ,mBAASsZ,GAArC,mBAAOK,EAAP,KAAeD,EAAf,KAUA,OAPApK,qBAAU,WACFqK,EAAQpU,SAASqU,gBAAgBtJ,UAAUqC,IAAIyG,IAC9C7T,SAASqU,gBAAgBtJ,UAAUsC,OAAOwG,MAEhD,CAACO,IAGiB,QAAjB5Z,EAAM8Z,QAA0B,KAC5B,mCAEJ,qBAAMnZ,UAAU,cAAcW,QAAS,kBAAMqY,GAAWC,IAAxD,SAAmEA,EAAQ,cAAE,KAAF,IAAa,cAAC,KAAD,SCKjFG,GA1BC,WACZ,IAAOzZ,EAASC,qBAAWC,IAApBF,MAEP,OACI,mCACA,eAAC0Z,GAAA,EAAD,CAAMrZ,UAAU,UAAhB,UAEI,cAAC,IAAD,CAAUwY,OAAK,EAAEzW,GAAG,IAAIuX,gBAAgB,iBAAiBtZ,UAAU,cAAnE,SAAiF,cAAC,KAAD,MAEjF,cAAC,IAAD,CAAU+B,GAAG,eAAeuX,gBAAgB,iBAAiBtZ,UAAU,cAAvE,SAAqF,cAAC,KAAD,MACrF,cAAC,IAAD,CAAU+B,GAAG,cAAcuX,gBAAgB,iBAAiBtZ,UAAU,cAAtE,SAAoF,cAAC,KAAD,MAGpF,mBAAGA,UAAU,qBAAb,SAAmC,cAAC,GAAD,MACnC,cAAC,IAAD,CAAUA,UAAU,qBAAqB+B,GAAG,WAA5C,SAAuD,cAAC,KAAD,MACvD,cAAC,IAAD,CAAU/B,UAAU,qBAAqB+B,GAAG,SAASpB,QAAS,kBAAMhB,EAAM4Z,UAA1E,SAAoF,cAAC,KAAD,YCMjFC,oBArBf,WACE,IAAQ7Z,EAAUC,qBAAWC,IAArBF,MAGR,OACE,mCACE,sBAAKK,UAAU,MAAf,UAEGL,EAAMwY,OACL,cAAC,GAAD,IACA,KAEA,cAAC,GAAD,CAAYgB,QAAQ,SACpB,cAAC,GAAD,YCXKM,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB9Y,MAAK,YAAkD,IAA/C+Y,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,yDCLDO,GAAUC,8BAGjBC,GAAOC,KAAMC,OAAO,CACtBC,iBAAiB,EACjBC,QAASN,KAGbE,GAAKK,aAAaC,QAAQC,KAAK,SAACC,GAE5B,OADAA,EAAOjX,QAAQkX,cAAf,iBAAyCC,aAAaC,QAAQ,UACvDH,KAEXR,GAAKK,aAAaO,SAASL,KAAK,SAACC,GAC7B,OAAOA,IADX,uCAEG,WAAOzP,GAAP,iBAAA9D,EAAA,yDACO4T,EAAkB9P,EAAMyP,OACD,MAA1BzP,EAAM6P,SAASxH,SAAkBrI,EAAMyP,QAAWzP,EAAMyP,OAAOM,SAFnE,wBAGKD,EAAgBC,UAAW,EAHhC,kBAKiCb,KAAMpH,IAAN,UAAaiH,GAAb,YAAgC,CAACK,iBAAiB,IALnF,cAKeS,EALf,OAMSF,aAAaK,QAAQ,QAASH,EAASnZ,KAAKuZ,aANrD,kBAOgBhB,GAAKM,QAAQO,IAP7B,kCASStM,QAAQC,IAAI,gOATrB,0DAFH,uDAiBewL,UC7BMiB,G,mIAEjB,WAAmB7b,EAAOE,GAA1B,0FACW0a,GAAKkB,KAAK,SAAW,CAAC9b,QAAOE,cADxC,2C,oHAIA,uGACW0a,GAAKkB,KAAK,YADrB,2C,uECAiBC,G,WAOjB,aAAc,0BANdnS,KAAO,GAMM,KALbgP,QAAS,EAKI,KAJboD,WAAY,EAIC,KAHbjD,mBAAgB/O,EAGH,KAFbgB,YAAc,EAED,KAkHb7E,WAAa,CACT,CACI,IAAQ,IACR,KAAQ,cAAC,KAAD,IACR,MAAS,mIAEb,CACI,IAAQ,YACR,KAAQ,cAAC,KAAD,IACR,MAAS,oDAEb,CACI,IAAQ,eACR,KAAQ,cAAC,KAAD,IACR,MAAS,gEAEb,CACI,IAAQ,cACR,KAAQ,cAAC,KAAD,IACR,MAAS,8EArIJ,KA8Ib2C,UAAY,cAACgR,GAAA,EAAD,CAAMF,QAAQ,OAAOqC,WAAW,SAASC,eAAe,SAASxW,OAAO,OAAxE,SAA+E,cAACyW,GAAA,EAAD,MA7IvFC,aAAmBC,M,4CAGvB,SAAQC,GACJD,KAAKzD,OAAS0D,I,qBAGlB,SAAQ1S,GACJyS,KAAKzS,KAAOA,I,wBAGhB,SAAW0S,GACPD,KAAKL,UAAYM,I,8BAGrB,SAAiBC,GACbF,KAAKtD,cAAgBwD,I,4BAEzB,SAAe5G,GACX0G,KAAKrR,YAAc2K,I,0DAEvB,WAAY3V,EAAOE,GAAnB,mBAAA2H,EAAA,+EAE+BgU,GAAYxa,MAAMrB,EAAOE,GAFxD,OAEcsb,EAFd,OAKQa,KAAKG,iBAAiBhB,EAASnZ,KAAKuZ,aACpCS,KAAKI,QAAQjB,EAASnZ,KAAKuH,MAC3ByS,KAAKK,SAAQ,GAEbvN,QAAQC,IAAI,QAASiN,KAAKtD,eATlC,kDAWQ5J,QAAQC,IAAR,UAAY,KAAEoM,gBAAd,iBAAY,EAAYnZ,YAAxB,aAAY,EAAkBsa,SAXtC,0D,oHAeA,8BAAA9U,EAAA,+EAEcgU,GAAY7B,SAF1B,OAGQsB,aAAasB,WAAW,SACxBP,KAAKK,SAAQ,GACbL,KAAKI,QAAQ,IALrB,gDAOQtN,QAAQC,IAAR,UAAY,KAAEoM,gBAAd,iBAAY,EAAYnZ,YAAxB,aAAY,EAAkBsa,SAPtC,yD,oHAYA,gCAAA9U,EAAA,6DACIwU,KAAKQ,YAAW,GADpB,SAGQ1N,QAAQC,IAAI,sBAHpB,SAI+ByL,KAAMpH,IAAN,UAAaiH,GAAb,YAAgC,CAACK,iBAAiB,IAJjF,cAIcS,EAJd,OAKQa,KAAKG,iBAAiBhB,EAASnZ,KAAKuZ,aAEpCS,KAAKI,QAAQjB,EAASnZ,KAAKuH,MAC3ByS,KAAKK,SAAQ,GARrB,kBAUe,CACH,UAAY,EACZ,OAAUL,KAAKzD,SAZ3B,yCAeQzJ,QAAQC,IAAR,UAAY,KAAEoM,gBAAd,iBAAY,EAAYnZ,YAAxB,aAAY,EAAkBsa,SAftC,kBAgBe,CACH,UAAY,EACZ,OAAUN,KAAKzD,SAlB3B,yBAsBQyD,KAAKQ,YAAW,GAtBxB,6E,qHA2BA,WAAiB/I,GAAjB,iBAAAjM,EAAA,6DACUiV,EAAW,IAAIC,SACrBjJ,EAAcpR,KAAI,SAAA8O,GAAI,OAAIsL,EAASE,OAAO,QAASxL,MAFvD,SAGsBqJ,KAAMiB,KAAN,UAAcnB,8BAAd,cAAyDmC,EAAU,CACjF3Y,QAAS,CACP,eAAgB,yBAL1B,cAGUyC,EAHV,yBAQWA,GARX,2C,wHAWA,WAAmB4K,GAAnB,qBAAA3J,EAAA,sEACsBoV,MAAM,GAAD,OAAItC,8BAAJ,mBAA4CnJ,EAAKF,MAD5E,UAGsB,MAFZ1K,EADV,QAGYoN,OAHZ,iCAI2BpN,EAAIsW,OAJ/B,OAIcA,EAJd,OAKcC,EAActR,OAAOuR,IAAIC,gBAAgBH,IACzCI,EAAOhY,SAASiY,cAAc,MAC/BC,KAAOL,EACZG,EAAKG,SAAWjM,EAAKE,SACrBpM,SAASoY,KAAKC,YAAYL,GAC1BA,EAAKM,QACLN,EAAK3K,SAXb,4C,sHAeA,WAAiBuB,EAAKlD,GAAtB,eAAAnJ,EAAA,sEACsBgT,KAAMpH,IAAN,UAAakH,8BAAb,sBAAwDzG,IAD9E,UAGsB,KAHtB,OAGYF,OAHZ,gCAIgChD,EAAmB,CAACpL,UAAW,CACnD,IAAOsO,KALnB,OAIc2J,EAJd,OAOQ1O,QAAQC,IAAIyO,EAAUxb,MAP9B,2C,oFAmCA,SAAcyb,GAEV,OADazB,KAAKlW,WAAWkP,MAAK,SAACvH,GAAD,OAAQA,EAAGgQ,MAAQA,S,KCxIvD1d,I,OAAQ,IAAI2b,IAELzb,GAAUyd,wBAAc,CACnC3d,WAII4d,GAAgB,IAAIC,IAAc,CACtCC,IAAKvD,kCACLrP,QAAS,CACP6S,WAAW,EACXC,MAAM,EACNC,WAAY,IACZC,kBAAmB,IACnBC,mBAAmB,WAAD,4BAAE,sBAAA1W,EAAA,6DAChBsH,QAAQC,IAAI,uCADI,SAEVhP,GAAM0Y,YAFI,2CAAF,kDAAC,GAInB0F,iBAAkB,iBAAO,CACvBra,QAAS,CACP,+BAA4B/D,GAAM2Y,qBAQpC0F,GAAe,IAAIC,eAAa,CACpCpB,KAAMU,GACNW,MAAO,IAAIC,kBAGPC,GAAOvZ,SAASC,eAAe,QAErCuZ,IAASxa,OACP,cAAC,iBAAD,CAAgBya,OAAQN,GAAxB,SACE,cAAC,IAAD,UACE,cAAC,GAAD,CAAKO,YAAaH,GAAKI,QAAQC,QAA/B,SACE,cAAC5e,GAAQ6e,SAAT,CAAkBpe,MAAOX,WAQ/Bye,IAGF3E,O","file":"static/js/main.1bac0fbe.chunk.js","sourcesContent":["import { useState, useContext } from 'react';\n// import {NotificationContainer, NotificationManager} from 'react-notifications';\nimport { Context } from '../../index';\n\nimport {TextField, Button} from '@material-ui/core';\nimport './LoginForm.sass'\nimport '../../theme.css'\n\nimport { useHistory } from \"react-router-dom\";\n\nconst LoginForm = (props) => {\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    \n    const {store} = useContext(Context);\n    const history = useHistory();\n\n    // const setNotification = () => {\n    //     NotificationManager.error('Похоже вы ошиблись', '\t(ಥ﹏ಥ)', 3000);\n    // }\n\n    const login = (e) => {\n      store.login(email, password).then( () =>  history.push(\"/\") )\n\n    }\n    return(\n        <>\n              <div className='loginCard'>\n\n                    <TextField\n                    className='loginInput'\n                    label=\"Email\"\n                    onChange={e => setEmail(e.target.value)}\n                  />\n                  <TextField\n                    label=\"Password\"\n                    type=\"password\"\n                    className='loginInput'\n                    onChange={e => setPassword(e.target.value) }\n                  />\n                  <Button\n                    className=\"Button\"\n                    variant=\"outlined\"\n                    width='300px'\n                    onClick={login}\n                  >Войти</Button>\n              </div>\n     \n        {/* <NotificationContainer/> */}\n        </>\n    );\n}\n\nexport default LoginForm\n","import gql from 'graphql-tag'; \n\n// Выбираем заказы находящиеся только в Прездаказах и в производстве \n//   OrderStatusID \n//     1 - В производстве\n//     3- Предзаказ\n//     4- Выпущен и отгружен\n// \n\nexport const GetOrdersSubscription = gql`\nsubscription GetOrders($search: String) {\n    erp_Orders(where: {OrderStatusID: {_neq: 4} }) {\n      OrderID\n      Entity\n      InvoiceNumber\n      City\n      ShippingDate\n      PaidAmount\n      TotalAmount\n      CreatingDate\n      ManagerID\n      OrderStatus {\n        Name\n        ID\n      }\n      OrderItems {\n        Quantity\n        OrderItemID\n        Name\n        OrderID\n      } \n      User {\n        FirstName\n      }\n\n    }  \n  }\n`\nexport const GET_USERS = gql`\nquery getUsers {\n  erp_Users{\n    FirstName\n    LastName\n    UserID\n  }\n}\n`","\nimport { useTable } from 'react-table'\nimport { Link } from 'react-router-dom'\nimport  moment  from 'moment';\n\n\nexport const setPaidPercent = (total, paid) => {\n    if (!total || !paid){\n        return ' '    \n    }\n    return ' - ' + ((paid/total) * 100).toFixed(0) + '%'\n}\n\nexport const columnsList = [\n    {\n      Header: '',\n      id: 'index',\n      accessor: (_row: any, counter) => counter +1\n    },\n    {\n      Header: 'Наим.',\n      id: \"orderItems\",\n      accessor: data => {\n        if (data.OrderItems.length == 0) return <Link to={`/orders/${data.OrderID}`}><div>пустота...</div></Link>\n\n        else return (<Link to={`/orders/${data.OrderID}`}>\n        {data.OrderItems.map(item => (\n          <div key={item.OrderItemID} >\n            <span>{item.Name}</span>\n          </div>\n        ))}\n        </Link>)\n      }\n      \n    },\n    {\n      Header: 'Кол-во',\n      accessor: data =>\n      data.OrderItems.map(item => (\n      <div key={item.OrderItemID} >\n        <div>{item.Quantity}</div>\n      </div>\n      ))\n    },\n    {\n      Header: 'Отгрузка',\n      accessor: (order) => \n      <> { moment(order.ShippingDate).format('DD.MM.YY') } </>\n    },\n    {\n      Header: 'Счет- оплата',\n      accessor: data => data.InvoiceNumber + setPaidPercent(data.TotalAmount, data.PaidAmount),\n    },\n    {\n      Header: 'Компания',\n      accessor: 'Entity',\n    },\n    {\n      Header: 'Гор.',\n      accessor: 'City',\n    },\n    {\n      Header: 'Мдж.',\n      accessor: data => <div className='priorityTable-manager'>{data.User.FirstName[0]}</div>,\n    },\n  ]\n\nexport default function Table({columns, data, id}){\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n      } = useTable({\n        columns,\n        data,\n      })\n\n\n    if (data.length == 0) return null;\n\n   return (\n     <>\n    <table id={id} className=\"priorityTable\" {...getTableProps()}>\n      <thead>\n        {headerGroups.map((headerGroup, i) => (\n          <tr key={i} {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map((column, i) => (\n              <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {rows.map((row, i) => {\n          prepareRow(row)\n          return (\n               <tr {...row.getRowProps()}>\n              {row.cells.map((cell, i) => {\n                return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n              })}\n              </tr>\n          )\n        })}\n      </tbody>\n    </table>\n    </>\n  )\n}\n\n\n","import {gql} from 'graphql-tag'; \n\n//   OrderStatusID \n//     1 - В производстве\n//     3- Предзаказ\n//     4- Выпущен и отгружен\n// \n\nexport const MUTATE_ORDER_STATUS = gql`\n    mutation MyMutation($OrderID: Int!, $OrderStatus: Int!){\n    update_erp_Orders_by_pk(pk_columns: {OrderID: $OrderID}, _set: {OrderStatusID: $OrderStatus}) {\n        OrderID\n    }\n  }\n\n`;","import { useState } from \"react\";\n\nimport Table, { columnsList } from '../PriorityLayout/tableLogic'\n\n//apollo\nimport { MUTATE_ORDER_STATUS } from \"../../hasura-queries/MutationOrderStatus\";\nimport { useMutation } from '@apollo/client';\n\n//UI\nimport { Heading} from 'evergreen-ui';\nimport {UilAngleRight, UilPlus} from '@iconscout/react-unicons';\nimport './index.sass'\n\nconst PreOrders = (props) => {\n    const [showPreOrders, setShowPreOrders] = useState(false);\n\n    const [mutationOrderStatus] = useMutation(MUTATE_ORDER_STATUS);\n\n\n    let dt = props.preOrders\n    \n        const handleToggle = () => {\n            setShowPreOrders(!showPreOrders);\n            var growDiv = document.getElementById('grow');\n            if (growDiv.clientHeight == 0) growDiv.style.height = document.getElementById('measuringWrapper')?.clientHeight + 10+ 'px';\n            else growDiv.style.height = 0;\n          };\n          \n    \n        const onClickTransfer = (data) => {\n          mutationOrderStatus({ variables: { OrderID: data.OrderID, OrderStatus: 1 } })\n          dt.splice(dt.indexOf(data), 1)\n          if (dt.length == 0) handleToggle()\n        }\n\n\n    var newColumnList = [...columnsList];\n\n    newColumnList.push({\n        Header: ' ',\n        accessor: data => \n        <div onClick={() => onClickTransfer(data)} className=\"square-button\"><UilPlus/></div>\n        ,\n      })\n\n    return(\n        <>\n    \n        <div className={showPreOrders ? \"preorders-container active\" : \"preorders-container\"} >\n      \n          <Heading  onClick={handleToggle} className='group-heading preorders-heading'> Предзаказы <span><UilAngleRight/></span>\n          </Heading>\n\n            <div id=\"grow\">\n              <Table id=\"measuringWrapper\" columns={newColumnList} data={props.preOrders} />\n            </div>\n        </div>\n       \n        </>\n    )\n}\n\nexport default PreOrders","import { Heading } from 'evergreen-ui';\n\n\nconst BaseHeader = (props) => {\n\n    return(\n           <div className=\"base-container page-header\">\n                    <span>{props.pageParams.icon}</span>\n                    <Heading>{props.pageParams.title}</Heading>\n                    {/* <div className=\"search-box\"><SearchInput height={minorScale(10)}  onChange={(e) => props.search(e)} className=\"search-input\" /></div> */}\n                    \n                    {props.children}\n            </div>\n    )\n}\n\nexport default BaseHeader","import {gql} from 'graphql-tag'; \n\nexport const INSERT_ORDER = gql`\nmutation MyMutation($managerID: Int!, $orderStatusID: Int!, $isReclamation: Boolean!) {\n  insert_erp_Orders(objects: {ManagerID: $managerID, OrderStatusID:  $orderStatusID, IsReclamation: $isReclamation}) {\n    returning {\n      OrderID\n    }\n  }\n}\n`;","import { useMutation } from '@apollo/client';\nimport { INSERT_ORDER } from '../../hasura-queries/MutationOrder'\n\nimport {UilPrint, UilPlus, UilBell, UilEditAlt} from '@iconscout/react-unicons';\nimport { UserIcon } from 'evergreen-ui';\n\n\n\nconst ActionsHeader = (props) => {\n    const [ createNewOrder] = useMutation(INSERT_ORDER, {variables: {\n        'managerID':     props.userID,\n        'orderStatusID': 3,\n        'isReclamation':  false,\n    }})\n\n    const createOrderHandler = () => {\n        createNewOrder().then( (res) => {\n            props.history.push(`/orders/${res.data.insert_erp_Orders.returning[0].OrderID}?edit=true`)\n        }\n\n\n        \n        )\n    }\n\n    const editOrderHandler = () => {\n        props.setEditState(!props.editState)\n    }\n\n    const editOrderBtn = () => {\n        if (props.accessLevel == 2){\n            const editIconClass = () => props.editState ? 'action-icon active': 'action-icon'\n            return <div data-for='global' data-tip=\"Добавить\" className={editIconClass()} onClick={editOrderHandler}><UilEditAlt/></div>\n        }\n    }\n\n    const addOrder = () => {\n        // const createOrderMutation = useMutation()\n        if (props.createOrder){\n            return <div data-for='global' data-tip=\"Добавить\" onClick={createOrderHandler} className=\"action-icon\"><UilPlus/></div>\n        }\n    }\n    return(\n        <div className=\"action-block\">\n            {/* <div data-for='global' data-tip=\"Распечатать\" className=\"action-icon\"><UilPrint/></div> */}\n            {addOrder()}\n            {editOrderBtn()}\n            {/* <div data-for='global' data-tip=\"Уведомления\" className=\"action-icon\"><UilBell/></div> */}\n        </div>\n    )\n}\n\nexport default ActionsHeader","import {  useMemo, useContext } from 'react';\nimport { Context } from '../..';\nimport {useSubscription} from '@apollo/client';\nimport PreOrders from '../PreOrders'\nimport { GetOrdersSubscription } from '../../hasura-queries/getOrders';\nimport BaseHeader from '../BaseHeader';\nimport ActionsHeader from '../BaseHeader/ActionsHeader';\nimport './index.sass'\n\nimport Table, {columnsList} from '../PriorityLayout/tableLogic';\nimport  {groupOrders} from './tableLogic'\n\n// поменять сортировку на день первой оплаты\n\nconst RecentlyLayout = ({data}) => {\n    let preOrders = []; \n    let orders = [];\n    const {store} = useContext(Context);\n    var groupedData = null;\n\n        if (data.erp_Orders){  \n            data.erp_Orders.sort((a, b) => b.ShippingDate < a.ShippingDate ? 1: -1);  \n\n            //отбираем предзаказы\n            data.erp_Orders.forEach((order)=> {\n\n                if (order.OrderStatus.ID == 3) {\n                    preOrders.push(order);\n\n                }else if (order.OrderStatus.ID == 1) {\n                    orders.push(order);\n                }\n            });\n\n            groupedData = groupOrders(orders);\n        }\n        \n    const columns = useMemo(\n        () => columnsList,\n        []\n      )\n    \n\n    const group = (data, heading) => {\n        if (data.length == 0) return null;\n\n        return (\n            <>\n            <div className='group-heading'>{heading}</div>\n                <div className=\"tableWrap\">\n                <Table columns={columns} data={data} />\n                </div>\n            </>\n        )\n    }\n    \n    return(\n         <>\n            {groupedData\n            ? (\n                <>\n                \n                {group(groupedData[0].objs, 'Сегодня')}\n                {group(groupedData[1].objs, 'Вчера')}\n                {group(groupedData[2].objs, 'Остальные')}\n\n\n{/* \n                <div className='group-heading'>сегодня</div>\n                 <div className=\"tableWrap\">\n                    <Table columns={columns} data={groupedData[0].objs} thead={false} />\n                 </div>\n\n                 <div className='group-heading' >вчера</div>\n                 <div className=\"tableWrap\">\n                    <Table columns={columns} data={groupedData[1].objs} thead=\"false\"/>\n                 </div>\n\n                 <div className=\"tableWrap\">\n                    <Table columns={columnsList} data={groupedData[2].objs} />\n\n                 </div> */}\n\n                </> \n            ) : store.preloader }\n\n        </>\n    );\n}\n\n\nexport default RecentlyLayout","import moment from 'moment' \nimport setPaidPercent from '../PriorityLayout/tableLogic'\n\n\nexport const groupOrders = (orders) => {\n    let days = [{\n        'name': 'Сегодня',\n        'date': moment().subtract(0, \"day\").format(\"YYYY-MM-DD\"),\n        'objs': []}, \n        { 'name': 'Вчера',\n        'date': moment().subtract(1, \"day\").format(\"YYYY-MM-DD\"),\n        'objs': []}, \n        { 'name': '',\n        'objs': [] },\n        ]\n        \n    if (orders){\n        \n        for (const order of orders){\n            let isAdded = false;\n\n            days.forEach( (day) => {\n                if (order.CreatingDate.split('T')[0] === day.date){\n                    day.objs.push(order);\n                    isAdded = true;\n                } else if(day.name === '' && !isAdded) day.objs.push(order)\n            })}\n    }\n    \n    return days;\n};\n","import { FormControl, Select, MenuItem } from '@material-ui/core';\n\nexport  const managerFilterIndicator = (managerFilter) => {\n    if (managerFilter != 0) return (\n        <div className='managerFilter-indicator'>\n            <div className=\"circle\"></div>\n            <p>Выдача ограничена фильтром</p>\n        </div>\n    ) \n}\n\n\nconst ManagerFilter = ({ dispatch, state, users }) => {\n\n    var val = state.managerFilter\n    \n    const handler = (e) => dispatch({ type: 'managerFilter', payload: e.target.value })\n\n      if (!users) return null\n\n      return (\n        <div className='managerFilter-form'>\n        <span className='filterPlaceholder'>manager</span>\n        <FormControl>\n          <Select\n            name=\"managerFilter\"\n            value={val}\n            onChange={handler}\n            disableUnderline={true}\n            inputProps={{ 'className': 'managerFilter-input' }}\n          >\n            <MenuItem value={0} >Все</MenuItem>\n            { users.map( (user) => \n            <MenuItem  value={ user.UserID } key={user.UserID} > {`${user.FirstName} ${user.LastName}`} </MenuItem>\n            )}\n        \n        </Select>\n        </FormControl>\n      </div>\n      )\n}\n\nexport default ManagerFilter","import { useMemo, useContext, useReducer } from 'react'\nimport { Context } from '../../index'\nimport { useHistory } from \"react-router-dom\";\n\n//apollo\nimport { useSubscription, useQuery } from '@apollo/client'\nimport { GetOrdersSubscription, GET_USERS } from '../../hasura-queries/getOrders'\n\nimport Table, { columnsList } from './tableLogic'\n\n//components\nimport PreOrders from '../PreOrders'\nimport BaseHeader from '../BaseHeader'\nimport ActionsHeader from '../BaseHeader/ActionsHeader'\nimport RecentlyLayout from '../RecentlyLayout';\nimport ManagerFilter, { managerFilterIndicator } from './ManagerFilter';\n//UI\nimport './index.sass'\nimport { UilSearch } from '@iconscout/react-unicons'\nimport {Tabs, Tab, Box, Typography} from '@material-ui/core';\n\nvar incomingOrders = undefined;\n\nfunction reducer(state, action) {\n    switch (action.type) {\n        case 'orders':\n        case 'preOrders': \n        case 'priorityTab': \n        case 'searchKeyword': \n        case 'managerFilter': \n        case 'filtredOrders':\n            return {...state, [action.type]: action.payload };\n\n    }\n}\n\nfunction filteringAlg(keyword, ...rest){\n    var finded = false\n    rest.map( (arg) => {\n        if (arg && arg.toLowerCase().includes(keyword.toLowerCase())) finded = true\n    })\n   \n    if (finded) return true \n    else return false\n}\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n  \n    return (\n      <div\n        role=\"tabpanel\"\n        hidden={value !== index}\n        id={`simple-tabpanel-${index}`}\n        aria-labelledby={`simple-tab-${index}`}\n        {...other}\n      >\n        {value === index && (\n          <Box p={3}>\n            <Typography component={'div'}>{children}</Typography>\n          </Box>\n        )}\n      </div>\n    );\n  }\n\n  function a11yProps(index) {\n    return {\n      id: `simple-tab-${index}`,\n      'aria-controls': `simple-tabpanel-${index}`,\n    };\n  }\n  \n\n\nconst PriorityLayout = () => {\n    const { store } = useContext(Context);\n\n    const [state, dispatch] = useReducer(reducer, {\n        orders: [],\n        preOrders: [],\n        priorityTab : store.priorityTab,\n        searchKeyword: '',\n        managerFilter: 0,\n        filtredOrders: [],\n    });\n\n    const {orders, preOrders, priorityTab} = state;\n\n    const history = useHistory();\n\n    const onSubscriptionData = (options) => {\n        let orders = []; let preOrders = [];\n        options.subscriptionData.data.erp_Orders.forEach( (order) => {\n            if (order.OrderStatus.ID == 3) preOrders.push(order)\n            else if (order.OrderStatus.ID == 1) orders.push(order)\n        })\n        incomingOrders = orders\n        dispatch({ type: 'preOrders', payload: preOrders });\n        dispatch({ type: 'orders', payload: orders })\n    }\n\n    const columns = useMemo(\n        () => columnsList, []\n    )\n    \n    const { data: users = []} = useQuery(GET_USERS);\n\n    const tabHandler = (event, newValue) => {\n        dispatch({ type: 'priorityTab', payload:newValue })\n        store.setPriorutyTab(newValue)\n      };\n\n    const getFiltredData = () => {\n        const sword = state.searchKeyword;\n        var result = [];\n\n        // применить поиск по ключевому слову\n        if (sword !== '') {\n            result = incomingOrders.filter( (order) => filteringAlg(sword, order.InvoiceNumber, order.Entity ))         \n        }\n        else result = incomingOrders\n    \n\n         //применить поиск по фильру\n        if (state.managerFilter != 0){\n            var newOrders = []\n            result.map( (ord) => {\n                if (ord.ManagerID == state.managerFilter) newOrders.push(ord)\n            })\n            return newOrders\n        }\n        else return result\n        \n\n    }\n\n\n    const searchHandler = (e) => dispatch({ type: 'searchKeyword', payload: e.target.value.trim() }) \n\n    const { loading, error, data = [] } = useSubscription(GetOrdersSubscription, { onSubscriptionData, fetchPolicy: \"cache-and-network\", nextFetchPolicy: \"cache-first\" });\n\n    return ( \n        <div>\n            <BaseHeader pageParams = { store.getPageParams(window.location.pathname) }>\n                <ActionsHeader createOrder={1} userID={store.user.UserID} history={history}/>\n            </BaseHeader>\n        \n                    <PreOrders preOrders = { preOrders }/>\n\n                    <div  className='priorityTabs'>\n                        <Tabs value={priorityTab} onChange={tabHandler} aria-label=\"simple tabs example\"  indicatorColor=\"primary\">\n                            <Tab label=\"Очередность\" {...a11yProps(0)} />\n                            <Tab label=\"Недавние\" {...a11yProps(1)} />\n                        </Tabs>\n                    </div>\n                    \n\n                    <TabPanel value={priorityTab} index={0}>\n                        <div className=\"tableWrap\">\n\n                            <div className=\"tableSearchInput\">\n                                <UilSearch className=\"action-icon\"/>\n                                <input type='text' placeholder=\"поиск (номер счета или организация)\" onChange={searchHandler} autoFocus/>\n                                <ManagerFilter dispatch={dispatch} state={state} users={users.erp_Users} incomingOrders={incomingOrders} />\n\n                            </div>\n                                {managerFilterIndicator(state.managerFilter)}\n\n                            {incomingOrders && <Table columns = { columns } data = { getFiltredData() }/>}\n                        </div>\n                    </TabPanel>\n\n                    <TabPanel value={priorityTab} index={1} className=\"recentlyLayout\" >\n                        <RecentlyLayout data={data} />\n                    </TabPanel>\n        </div>\n    )\n}\nexport default PriorityLayout;","import gql from 'graphql-tag'\n\nexport const GET_ORDER_BY_ID = gql`\nquery MyQuery($OrderID: Int!) {\n  erp_Orders(where: {OrderID: {_eq: $OrderID}}) {\n    City\n    CreatingDate\n    Comment\n    Entity\n    InvoiceNumber\n    IsReclamation\n    ManagerID\n    OrderID\n    OrderNumber\n    OrderStatusID\n    PaidAmount\n    ShipmentComment\n    ShippingDate\n    TotalAmount\n    User {\n      FirstName\n      LastName\n      UserID\n    }\n    OrderItems {\n      Fitter\n      Name\n      FullName\n      OrderItemID\n      OrderID\n      Quantity\n      SerialNumber\n    }\n    CheckListUnits {\n      IsComplited\n      OrderID\n      Point\n      CheckListUnitID\n    }\n    Docs {\n      Key\n      FileName\n    }\n  }\n}\n`","import {gql} from 'graphql-tag'; \n\nexport const PUSH_DOCS_ARRAY = gql`\nmutation MyMutation($objects: [erp_Docs_insert_input!]!) {\n  insert_erp_Docs(objects: $objects) {\n    returning {\n      ID\n    }\n  }\n}\n`;\n\nexport const DELETE_ORDER_FILE = gql`\n    mutation MyMutation($key: String!) {\n    delete_erp_Docs(where: {Key: {_eq: $key} }) {\n        returning {\n        Key\n        }\n    }\n    }\n`;","\nconst OrderComposition = (props) => {\n\n    return(<>     \n            {props.data.map( el => \n\n                <div key={el.OrderItemID} className=\"Unit\">\n\n\n                    <div className='firstRow'>\n\n                        <div className=\"name\"> {el.Name} </div>\n                        <span  className=\"quantity\"> {el.Quantity}</span>\n\n                    </div>\n                    \n                    <div  className=\"fullName\"> { el.FullName }</div>\n\n                </div>\n\n\n            )}\n            \n    </>)\n}\n\nexport default OrderComposition","import { setPaidPercent } from \"../PriorityLayout/tableLogic\";\nimport { UilHistoryAlt } from \"@iconscout/react-unicons\";\nimport  moment  from 'moment'\nimport \"./sass/order-meta.sass\";\n\nconst OrderMeta = (props) => {\n\n  return (\n    <div className=\"Meta\">\n\n      <div className=\"SignificantInfo\">\n            <div>\n                <pre>План. отгрузка</pre>\n                {moment(props.data.ShippingDate).format('DD.MM.YY')}\n            </div>\n            <div>\n                <pre>Счет / оплата</pre>\n                {\"№ \" +\n                props.data.InvoiceNumber +\n                setPaidPercent(props.data.TotalAmount, props.data.PaidAmount)}\n                    <span className=\"PaymentHistory\">\n                        <UilHistoryAlt />\n                    </span>\n            </div>\n      </div>\n\n      <div className=\"MetaWrapper\">\n           <div className='Left'>\n                <div>\n                    <pre>Номер заказа</pre>\n                    {props.data.OrderNumber}\n                </div>\n                <div>\n                    <pre>Создан</pre>\n                    {props.data.ShippingDate}\n                </div>\n                <div>\n                    <pre>Менеджер</pre>\n                    {props.data.User.FirstName} {props.data.User.LastName}\n                </div>\n           </div>\n\n           <div className='Right'>\n                    <div>\n                        <pre>Юр Лицо</pre>\n                        {props.data.Entity}\n                    </div>\n                    <div>\n                        <pre>Гор</pre>\n                        {props.data.City}\n                    </div>\n            </div>\n      </div>\n\n      <div className=\"OrderComment\">\n            <pre>Комментарий</pre>\n            {props.data.Comment}\n      </div>\n    </div>\n\n  )\n}\n\nexport default OrderMeta\n","import {gql} from 'graphql-tag'; \n\nexport const UPDATE_ORDER_INFO = gql`\n mutation MyMutation($fields: erp_Orders_set_input, $orderID: Int!) {\n  update_erp_Orders_by_pk(pk_columns: {OrderID: $orderID}, _set: $fields) {\n\t\tOrderID\n  }\n}\n`;","import { useEffect } from 'react';\nimport {TextField} from '@material-ui/core';\nimport './EditableInfo.sass'\n\nimport { useMutation } from '@apollo/client';\nimport { UPDATE_ORDER_INFO } from '../queries/MutationOrderInfo'\n\nimport NumberFormat from 'react-number-format';\nimport moment  from 'moment'\n\nlet fields = {}\n\n\nfunction DateFormatCustom(props) {\n  const { inputRef, onChange, ...other } = props;\n\n  return (\n    <NumberFormat\n      {...other}\n      getInputRef={inputRef}\n      onValueChange={values => {\n        onChange({\n          target: {\n            name: props.name,\n            value: values.value\n          }\n        });\n      }}\n      format='##.##.##'\n    />\n  );\n}\n\nfunction MoneyFormatCustom(props) {\n  const { inputRef, onChange, ...other } = props;\n\n  return (\n    <NumberFormat\n      {...other}\n      getInputRef={inputRef}\n      onValueChange={values => {\n        onChange({\n          target: {\n            name: props.name,\n            value: values.value\n          }\n        });\n      }}\n      prefix={'₽ '}\n      thousandSeparator={true}\n    />\n  );\n}\n\nconst EditableInfo = ({ data, orderID, refetch }) => {  \n\n    const addField = (e) => fields[e.target.name] = e.target.value\n    const [updateOrderInfo] = useMutation(UPDATE_ORDER_INFO);\n  \n    console.log(moment(data.ShippingDate).format('DD.MM.YY'))\n    useEffect(() => {\n        return () => {\n            updateOrderInfo({variables: {\n            orderID,\n            fields,\n            }})\n            refetch()\n        };\n    }, []);\n\n  return(\n    <form className=\"Meta EditableInfo\">\n      \n        \n        <TextField\n          label=\"План. отгрузка\"\n          name='ShippingDate'\n          defaultValue={moment(data.ShippingDate).format('DD.MM.YY')}\n          onChange={(e) => {\n            e.target.value = moment(e.target.value, \"DD-MM-YY\").format('YYYY-MM-DD')\n            addField(e)\n          }}\n          placeholder=\"dd.mm.yy\"\n          autoComplete=\"off\"\n          InputProps={{\n            inputComponent: DateFormatCustom\n          }}\n        />\n\n        <TextField\n          label=\"Номер счета\"\n          type=\"number\"\n\n          name='InvoiceNumber'\n          defaultValue={data.InvoiceNumber}\n          onChange={addField}\n        />\n\n        <TextField\n          label=\"Номер заказа\"\n          type=\"number\"\n\n          name='OrderNumber'\n          defaultValue={data.OrderNumber}\n          onChange={addField}\n        />\n\n         <TextField\n          label=\"Юр лицо\"\n          autoComplete=\"off\"\n          name='Entity'\n          defaultValue={data.Entity}\n          onChange={addField}\n        />\n        \n        <TextField\n          label=\"Город\"\n          autoComplete=\"off\"\n          name='City'\n          defaultValue={data.City}\n          onChange={addField}\n        />\n\n         <TextField\n          label=\"Сумма заказа\"\n          name='TotalAmount'\n          defaultValue={data.TotalAmount}\n          autoComplete=\"off\"\n          onChange={addField}\n          InputProps={{\n            inputComponent: MoneyFormatCustom\n          }}\n          />\n        \n        <TextField\n          label=\"Оплачено\"\n          name='PaidAmount'\n          defaultValue={data.PaidAmount}\n          autoComplete=\"off\"\n          onChange={addField}\n          InputProps={{\n            inputComponent: MoneyFormatCustom\n          }}\n        />\n\n        <TextField\n          label=\"Комментарий\"\n          multiline\n          autoComplete=\"off\"\n          name='Comment'\n          defaultValue={data.Comment}\n          onChange={addField}\n        />\n    </form>\n  )\n}\n\nexport default EditableInfo","import {gql} from 'graphql-tag'; \n\nexport const MUTATE_CHECKLIST_UNIT = gql`\nmutation MyMutation($CheckListUnitID: Int!, $IsCompluted: Boolean!) {\n  update_erp_CheckListUnits_by_pk(pk_columns: {CheckListUnitID: $CheckListUnitID}, _set: {IsComplited: $IsCompluted}) {\n    CheckListUnitID\n    IsComplited\n    Point\n  }\n}\n`","import { useMutation } from \"@apollo/client\"\nimport { MUTATE_CHECKLIST_UNIT } from './queries/MutationCheckListUnit'\n\nconst CheckList = ({data}) => {\n\n    const [updateCheckListUnit, { loading }] = useMutation(MUTATE_CHECKLIST_UNIT);\n\n    let propsData = JSON.parse(JSON.stringify(data))\n\n    propsData.sort((a, b) => b.Point < a.Point ? 1 : -1)\n\n    const toggleCheckListUnit = (target, el) => {\n        target.target.classList.toggle('complited')\n        updateCheckListUnit({ variables: { CheckListUnitID: el.CheckListUnitID, IsCompluted: !el.IsComplited } })\n    }\n\n    const units = propsData.map(el => \n            <div className={ el.IsComplited ? \"CheckListUnit complited\" : \"CheckListUnit\"}  \n                key={el.CheckListUnitID} \n                onClick={ target => toggleCheckListUnit(target, el) }>\n                {el.Point}\n            </div>\n        )\n\n   \n    return(\n        <div className=\"CheckList\">\n            {units}\n        </div>\n    )\n}\n\nexport default CheckList","import { useContext, useState, useRef } from 'react';\nimport { Context } from '../../index'\n\n//apollo\nimport { useMutation } from '@apollo/client';\nimport { DELETE_ORDER_FILE } from './queries/MutationOrderDocs';\n\nimport { Dialog, Button, TextField, DialogActions, DialogContent, DialogContentText } from '@material-ui/core';\n\nconst Docs = ({ data, onUpload, editState, refetch }) => {\n    const { store } = useContext(Context)\n\n    const [open, setOpen] = useState(false);\n    const [fileOnDelete, setFileOnDelete] = useState();\n    const [deleteFileMutation] = useMutation(DELETE_ORDER_FILE)\n\n    const onFileDeleteInput = useRef()\n\n    const handleClickOpen = (file) => {\n        setFileOnDelete(file)\n        setOpen(true)\n    }\n    \n    const handleClose = () => setOpen(false)\n\n    const onUploadFiles = () => {\n        if (onUpload.length == 0) return null\n        const files = onUpload.map(file => <div key={file.path}>{file.path}</div> )\n\n        return <div className=\"onUploadIcon\">{files}</div>\n    } \n\n    const deleteFile = async () => {\n        //close modal window\n        handleClose();\n        \n        if (onFileDeleteInput.current.value == 'Да'){\n            await store.deleteFile(fileOnDelete.Key, deleteFileMutation)\n            refetch()\n        }        \n    }\n\n    const attachedFiles = data.map(\n        file => {\n            if (editState) return(\n                <div key={file.Key}>\n                    <div onClick={ () => handleClickOpen(file)} \n                        className='file-name delete-file'> {file.FileName} </div>\n                </div>\n            )\n            else return (\n                <div onClick={ () => store.downloadFile(file)} \n                    key={file.Key}\n                    className='file-name'> {file.FileName} </div>\n            )\n        })\n     \n    return (        \n        <div className=\"Docs\" >\n            {attachedFiles}\n\n            {onUploadFiles()}\n\n            <div>\n                <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\" maxWidth='xs'>\n                    <DialogContent>\n                        <DialogContentText>\n                            Вы действительно хотите удалить <span>{fileOnDelete?.FileName}</span> ? <br/>\n                            Это действие необратимо.\n                            Пожалуйста, введите \"Да\" для подтверждения.\n                        </DialogContentText>\n                        <TextField\n                            autoFocus\n                            margin=\"dense\"\n                            fullWidth\n                            autoComplete='off'\n                            inputRef={onFileDeleteInput}\n                        />\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={deleteFile} className='dialog-danger-btn'>\n                            Я понимаю последствия, удалить этот файл\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n\n        </div>\n    )\n}\n\nexport default Docs","const Comments = (props) => {\n\n    return(\n        <div></div>\n    )\n}\n\nexport default Comments","import { UilCloudUpload } from '@iconscout/react-unicons'\n\nexport const isFileOnDropzone = (isDragActive) => {\n    var el = document.getElementById('dropzone')\n\n    if (isDragActive){\n        el.classList.add('isDragAccept')\n        return <UilCloudUpload className='inCloudconIcon'/>\n    } else el?.classList?.remove('isDragAccept')\n}","import {gql} from 'graphql-tag'; \n\nexport const INSERT_ORDER_ITEM = gql`\n mutation MyMutation($name: String!, $orderID: Int!, $quantity: Int!, $fullName: String!) {\n  insert_erp_OrderItems_one(object: {\n    OrderID: $orderID,\n    Name: $name,\n    FullName: $fullName,\n    Quantity: $quantity,\n    }) {\n    OrderItemID\n    OrderID\n  }\n}\n`;","import { useRef } from 'react'\nimport {TextField} from '@material-ui/core'\nimport { UilArrowUp } from '@iconscout/react-unicons'\n\nimport { useMutation } from \"@apollo/client\"\nimport { INSERT_ORDER_ITEM } from '../queries/MutationOrderItem'\n\nconst AddOrderItem = ({editState, orderID, refetch}) => {\n    const [inserdOrderItem, { loading }] = useMutation(INSERT_ORDER_ITEM);\n\n    const name = useRef(null)\n    const quantity = useRef(null)\n    const fullName = useRef(null)\n\n\n    const mutate = () => {\n        if (quantity.current.value != ''){\n            inserdOrderItem({variables: { \n                orderID, name: name.current.value, \n                quantity: quantity.current.value,\n                fullName: fullName.current.value, }}).then( () => refetch() )\n        }\n        \n    \n        name.current.value=null;\n        quantity.current.value=null\n        fullName.current.value=null\n    }\n\n    const addOne = () => (\n        <>\n            <TextField\n                size=\"small\" \n                className=\"name\"\n                label=\"Наименование\"\n                autoComplete='off'\n                inputRef={name}\n                // InputProps={{ disableUnderline: true }}\n              />\n            <TextField\n                size=\"small\" \n                className=\"quantity\"\n                label=\"Кол-во\"\n                type=\"number\"\n                inputRef={quantity}\n                autoComplete='off'\n                // InputProps={{ disableUnderline: true }}\n\n               />\n           \n\n           <TextField\n                label=\"Полное наименование\"\n                className=\"fullName\"\n                multiline\n                autoComplete=\"off\"\n                name='Comment'\n                // InputProps={{ disableUnderline: true }}\n                inputRef={fullName}\n                />\n\n            <div className=\"square-button push-order-item\"\n                onClick={mutate}><UilArrowUp/>\n            </div>\n\n               \n\n         </>\n        )\n\n    if (!editState) return null\n\n    return(\n        <div className=\"addOrderItem\">{addOne()}</div>\n    )\n}\nexport default AddOrderItem","import { useContext, useCallback, useState } from \"react\";\nimport { Context } from \"../..\";\nimport {useDropzone} from 'react-dropzone'\nimport { useParams, useLocation } from \"react-router-dom\"\n\n//apollo\nimport { GET_ORDER_BY_ID } from './queries/GetOrderByID'\nimport { PUSH_DOCS_ARRAY } from './queries/MutationOrderDocs'\nimport { useMutation, useQuery } from \"@apollo/client\";\n\n//components\nimport ActionsHeader from \"../BaseHeader/ActionsHeader\";\nimport OrderComposition from \"./OrderComposition\";\nimport Info from \"./Info\";\nimport EditableInfo from \"./EditableComponents/EditableInfo\";\nimport CheckList from './CheckList';\nimport Docs from './Docs';\nimport Comments from \"./Comments\";\nimport { isFileOnDropzone } from \"./Dropzone\";\n\n//ui\nimport { Heading } from 'evergreen-ui';\nimport './sass/index.sass'\nimport AddOrderItem from \"./EditableComponents/AddOrderItem\";\n\n\n\n\nconst OrderLayout = (props) => {\n    const {store} = useContext(Context);\n    const [onUploadFiles, setOnUploadFiles] = useState([])\n\n    const editStateQueryArg = new URLSearchParams(useLocation().search).get('edit')\n    const [editState, setEditState] = useState(editStateQueryArg)\n    const [pushDocs] = useMutation(PUSH_DOCS_ARRAY);\n    const orderID = useParams().id\n\n\n\n    const S3Upload = useCallback(acceptedFiles => {\n        setOnUploadFiles(acceptedFiles)\n\n        store.uploadFile(acceptedFiles).then(\n            (res) => {\n                if (res.status != 200) console.log('S3 file upload error')\n                else{\n                    let m = []\n                    for (var i=0;  i<res.data.length; i=i+2 ){\n                        m.push({\n                            'Key': res.data[i].key,\n                            'OrderID': orderID,\n                            'FileName': res.data[i].originalname,\n                        })\n                    }\n                    pushDocs({ variables: {'objects': m} })\n                } \n                setOnUploadFiles([])\n                refetch()\n                }\n            \n        )\n      }, [])\n\n      const {loading, error, data = [], refetch } = useQuery(GET_ORDER_BY_ID, {  fetchPolicy: \"no-cache\", variables: { OrderID: orderID}});\n\n      const {getRootProps, isDragActive} = useDropzone({className: 'dropzone', onDrop: S3Upload });\n  \n    //   function useQuery() {\n    //     return new URLSearchParams(useLocation().search);\n    //   }\n      \n    console.log();\n\n    return(\n    <>\n        {isFileOnDropzone(isDragActive)}\n        \n\n        {!loading ? (<>\n\n        <div className=\"page-header\">\n            <Heading>{data.erp_Orders[0].Entity} __  {data.erp_Orders[0].City}</Heading>\n\n            <ActionsHeader \n            accessLevel = {2} \n            setEditState = {setEditState} \n            editState = {editState} />\n            \n        </div>\n\n        <section className='OrderLayout' {...getRootProps()} id='dropzone'>\n\n                    <div className=\"Main\">\n\n                    <div className=\"Composition\">  \n                        <OrderComposition data={data.erp_Orders[0].OrderItems}/> \n                        <AddOrderItem editState={editState} orderID={orderID} refetch={refetch}/>\n                    </div>\n                    \n                        <div className=\"WrapperTwoCol\">\n                            <CheckList data={data.erp_Orders[0].CheckListUnits}/>\n                            <Docs data={data.erp_Orders[0].Docs} \n                                onUpload={onUploadFiles} \n                                editState = {editState} \n                                refetch={refetch}/>\n                        </div>\n                        <Comments/>\n                    </div>\n                    \n                    {editState ? <EditableInfo data={data.erp_Orders[0]} orderID={orderID} refetch={refetch}/> : <Info data={data.erp_Orders[0]} editState = {editState} /> }\n                   \n\n       \n\n        </section> \n\n        </>): store.preloader}\n\n           \n    </>\n    )\n}\n\nexport default OrderLayout","import gql from 'graphql-tag'; \n\nexport const GET_USERS = gql`\nquery MyQuery($gte: timestamp!, $lte: timestamp!) {\n  attendance_users_aggregate(\n    order_by: {lastname: asc}\n    ){\n    nodes {\n      id\n      card\n      firstname\n      lastname\n      intervalsPools(where: {entrance: {_gte: $gte,  _lte: $lte}}) {\n        entrance\n        exit\n        card\n        interval\n        status\n      }\n    }\n  }\n}  \n`\n\n\n","\nexport function daysInMonth (selectedMonth) {\n    // количество дней в текущем месяце\n      const [month, year] = selectedMonth\n      return new Date(year, month+1, 0).getDate();\n}\n\n\n  \n\n\nexport function getVarsForSubscription(selectedMonth){\n  const [month, year] = selectedMonth\n  // +1 because in js mounths start since 0, whereas hasura timestamp starts 1\n  var a = (parseInt(month)+1).toString()\n\n  // this expression add zero to mothh if minth.length < 2 ( 5 > 05 )\n  const m = a.replace(/(^|\\D)(\\d)(?!\\d)/g, '$10$2')\n\n  const gte = year+ \"-\"+ m +\"-01T00:00:00\";\n  const lte = year+ \"-\"+ m +\"-\" +daysInMonth(selectedMonth)+ \"T23:59:59\";\n  return {gte, lte}\n}","import { useTable } from 'react-table'\nimport { daysInMonth } from './functions'\n\n\nexport function generateColumns(selectedMonth, timeDeduction){\n  let columnsList = [\n      {\n      Header: 'Сотрудник',\n      accessor: data =>\n      <div>\n        <span>{data.lastname} </span>\n        <span>{data.firstname} </span>\n      </div>\n    }, \n    {\n      Header: 'Итого',\n      Cell: row => {\n        var hours = 0;\n        const intervals = row.row.original.intervalsPools\n        intervals.forEach( interval => {\n          hours += interval.interval \n        });\n\n        //вычетаем время на обед\n        hours -= timeDeduction/60 * intervals.length\n\n        return <div>{hours.toFixed(0)}</div>\n      }\n    }\n  ]\n\n  for (var day=1; day<= daysInMonth(selectedMonth); day++){\n    columnsList.push({\n      Header: day.toString(),\n      Cell: row => {\n        const day1 = row.column.Header\n\n        const [entrance, exit, interval, status] = getIntervalData(day1, row.row.original.intervalsPools, timeDeduction)\n        \n        return (\n          <div className={\"status-\"+ status}> \n            <div className=\"eventTime\">{ entrance }</div> \n            <div className=\"eventTime\">{ exit }</div>\n            <div className=\"interval\">{ interval }</div>\n          \n          </div>\n        )\n      }\n    })\n  }\n  return columnsList\n}\n\n\n\nfunction getIntervalData(day, intervals, timeDeduction){\n\n    // конвертация float в часы и минуты\n    function convertInterval(number, timeDeduction){\n        //вычетаем время на обед\n        number -= timeDeduction/60\n\n        var hour = Math.floor(number);\n        var decpart = number - hour;\n        var min = 1 / 60;\n\n        // Round to nearest minute\n        decpart = min * Math.round(decpart / min);\n        var minute = Math.floor(decpart * 60) + '';\n\n        // Add padding if need\n        if (minute.length < 2) {\n            minute = '0' + minute; \n        }\n\n        return hour + ':' + minute;\n    }\n\n    function getMinutes(t){\n        const minutes = t.getMinutes()\n        return (minutes < 10) ? `0${minutes}` : minutes\n    }\n\n    const e = intervals.find(el =>  new Date(el.entrance).getDate() == day)\n\n    if (e) {\n        const _entr = new Date(e.entrance)\n        const _exit = new Date(e.exit)\n\n        const entrance = _entr.getHours()+':'+ getMinutes(_entr)\n        const exit = _exit.getHours()+':'+ getMinutes(_exit)\n        const interval = convertInterval(e.interval, timeDeduction)\n\n        return [entrance, exit, interval, e.status]\n    }   else return [null, null, null, null]\n}\n\nexport default function Table({columns, data, className}){\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n      } = useTable({\n        columns,\n        data,\n      })\n\n\n   return (\n     <>\n    <table className={className} {...getTableProps()}>\n      <thead>\n        {headerGroups.map((headerGroup, i) => (\n          <tr key={i} {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map((column, i) => (\n              <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {rows.map((row, i) => {\n          prepareRow(row)\n          return (\n                <tr {...row.getRowProps()}>\n                {row.cells.map((cell, i) => {\n                  return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                })}\n                </tr>\n          )\n        })}\n      </tbody>\n    </table>\n    </>\n  )\n}\n\n\n","\nfunction monthAdd(date, month) {\n    // функция используется для корректного вычитания месяцев в chooseMonth\n    var temp = date;\n    temp = new Date(date.getFullYear(), date.getMonth(), 1);\n    temp.setMonth(temp.getMonth() + (month + 1));\n    temp.setDate(temp.getDate() - 1); \n  \n    if (date.getDate() < temp.getDate()) { \n        temp.setDate(date.getDate()); \n    }\n    return temp;    \n  }\n\nconst ReportConfigurator = ({ state, dispatch }) => {\n    const date = new Date()\n    const months = [\"янв\", \"фев\", \"мар\", \"апр\", \"май\", \"июн\", \"июл\", \"авг\", \"сен\", \"окт\", \"ноя\", \"дек\"];\n\n    const selectedMonthHandler = (e) => {\n        const d = new Date(e.target.attributes.date.value)\n        dispatch({type: 'selectedMonth', payload: [d.getMonth(), d.getFullYear()] })\n    }\n\n    const timeDeductionHandler = (e) => {\n        dispatch({\n            type: 'timeDeduction',\n            payload: parseInt(e.target.value.trim())\n        })\n    }\n\n    const chooseMonth = () => {\n        const m = []\n        \n        for (var i=0; i< 6; i++) {\n            const suitable = monthAdd(date, -i)\n            m.push(\n                <div onClick={selectedMonthHandler} \n                    className={suitable.getMonth() == state.selectedMonth[0] ? 'active' : ''}\n                    date={suitable}> {months[suitable.getMonth()]} </div>\n                )\n        } \n        return <div className=\"chooseMonth\">{m}</div>\n    }\n\n    return (\n        <div className=\"reportConfigurator\">\n        {chooseMonth()}\n        \n        <div className=\"arguments\">\n            <div className=\"wrap\">\n                <span>обед</span>\n                <input type='text' defaultValue={state.timeDeduction} onChange={timeDeductionHandler}/>\n                <span>мин</span>\n            </div>\n            \n            {/* <div className=\"wrap\">\n                <span>норма</span>\n                <input type='text' defaultValue={state.timeDeduction}/>\n                <span>ч</span>\n            </div> */}\n        </div>\n    </div>\n    )\n}\n\nexport default ReportConfigurator","\nimport  { useContext, useMemo, useEffect, useReducer } from 'react'\nimport { Context } from '../../index'\n\n//apollo\nimport { useQuery } from '@apollo/client'\nimport { GET_USERS } from './queries/getUsers' \n\n\nimport Table, { generateColumns } from './table'\nimport { getVarsForSubscription } from './functions'\n\n\nimport './index.sass'\nimport ReportConfigurator from './ReportConfigurator'\nimport BaseHeader from '../BaseHeader'\nimport { UilSearch } from '@iconscout/react-unicons'\n\n\n\nvar attendanceData = null;\n// учет рабочего времени\nconst Attendance = props => {\n    const date = new Date()\n    const { store } = useContext(Context);\n\n    function reducer(state, action) {\n        switch (action.type) {\n\n          case 'selectedMonth':\n            return {...state, [action.type]: action.payload,};\n\n          case 'timeDeduction':\n            return {...state, [action.type]: action.payload };\n\n          case 'filtredData':\n            return { ...state, [action.type]: action.payload};\n\n          default:\n            throw new Error();\n        }\n      }\n\n    const [state, dispatch] = useReducer(reducer, {\n        timeDeduction: 30,\n        selectedMonth: [date.getMonth()-1, date.getFullYear()],\n    });\n    const { timeDeduction, selectedMonth, filtredData } = state;\n\n\n    const { gte, lte } = getVarsForSubscription(selectedMonth)\n    const { loading } = useQuery(GET_USERS, { variables: { gte, lte }, onCompleted: (options) => {\n        attendanceData = options.attendance_users_aggregate.nodes;\n        dispatch({ type: 'filtredData', payload: attendanceData})\n    } });\n    \n    useEffect(() => {\n        return () => {\n            attendanceData = null\n        };\n    }, []);\n\n    function filteringAlg(user, keyword){\n        if (user.lastname.toLowerCase().startsWith(keyword.toLowerCase())) return true\n        else if (user.firstname.toLowerCase().startsWith(keyword.toLowerCase())) return true\n        else return false\n    }\n\n    const onChangeSearch = (e) => {\n        const keyword = e.target.value.trim();\n\n            if (keyword !== '') {\n              const result = attendanceData.filter((user) => filteringAlg(user, keyword))\n              dispatch({ type: 'filtredData', payload: result })\n            } else dispatch({ type: 'filtredData', payload: attendanceData})\n    }\n\n    const columns = useMemo(\n        () => generateColumns(selectedMonth, timeDeduction), [selectedMonth, timeDeduction]\n    )\n\n    return(\n        <>\n            <BaseHeader pageParams = { store.getPageParams(window.location.pathname) } search={onChangeSearch} /> \n            <ReportConfigurator state={state} dispatch={dispatch} />\n\n        <div className=\"tableWrap\">\n\n            <div className=\"tableSearchInput\">\n                <UilSearch className=\"action-icon\"/>\n                <input type='text' placeholder=\"поиск (номер счета или организация)\" onChange={ (e) => onChangeSearch(e) } autoFocus/>\n            </div>\n            \n            {filtredData && columns && <Table columns = {columns} data = {filtredData} className=\"attendance-table\" /> }\n\n             {/* условное обозначение */}\n             <div className=\"tableFooter legend\">\n                <div className=\"status-101\">Прерванный рабочий день</div>\n                <div className=\"status-102\">Не отмечен конец смены</div>\n                <span className=\"reportMeta\">\n                    Отчет за {selectedMonth[0] + 1} месяц {selectedMonth[1]} года \n                </span>\n\n            </div>\n\n        </div>\n        </>\n    )\n}\n\nexport default Attendance","import { useEffect, useState, useContext} from 'react';\nimport {Route, Redirect} from 'react-router-dom';\n\nimport { Context } from '../index';\n\nconst PrivateRoute = ({component: Component, ...rest}) => {\n\n    const [isLoaded, setisLoaded] = useState(undefined);\n    const [isAuth, setisAuth] = useState(undefined);\n\n    const { store } = useContext(Context)\n\n    async function checkAuth() {\n        const res = await store.checkAuth();\n        setisAuth(res.isAuth);\n        setisLoaded(res.isLoaded)\n    }\n\n    useEffect(() => {\n      if (store.inMemoryToken) {\n        setisAuth(true);\n        setisLoaded(true)\n      }\n      else checkAuth()\n      }, [])\n\n  return(\n    <Route\n      {...rest}\n      render={props => {\n        if (isLoaded){\n            if (isAuth) return <Component {...props} />\n            else return <Redirect to='/login'/>;\n        }\n        \n    }}\n    />\n  )\n};\n\n\nexport default PrivateRoute;\n\n","import {Switch, Route, Redirect} from \"react-router-dom\";\n\nimport LoginForm from '../components/LoginForm';\nimport PriorityLayout from \"../components/PriorityLayout\";\nimport RecentlyLayout from \"../components/RecentlyLayout\"\nimport OrderLayout from \"../components/OrderLayout\";\nimport Attendance from '../components/Attendance'\nimport PrivateRoute from \"./PrivateRoute\";\n\nconst AppRouter = (props) => {\n\n    return(\n        <Switch>\n            <Route path=\"/login\" component={LoginForm}/>\n            <PrivateRoute exact path='/' component={PriorityLayout}/>\n            <PrivateRoute path='/recently' component={RecentlyLayout}/>\n            <PrivateRoute path='/attendance' component={Attendance}/>\n\n\n            <PrivateRoute path='/orders/:id' component={OrderLayout}/>\n\n            #if required route was not found\n            <Redirect to=\"/\" />\n\n            {/* <PrivateRoute path='/recently' component={() => <PriorityLayout props={isRecently}/>} store={props.store}/> */}\n        </Switch>\n    )\n    \n};\n\nexport default AppRouter;","import AppRouter from '../../routers/Router';\n\n\nconst BaseLayout = (props) => {\n    return(\n        <>\n            <div className=\"base-container\">\n                \n                    <AppRouter /> \n                    {props.children}\n            </div>\n        </>\n    )\n}   \n\nexport default BaseLayout;","import { useEffect, useState } from \"react\"\nimport { useMediaQuery } from \"react-responsive\"\nimport { UilMoon, UilSun} from '@iconscout/react-unicons';\n\n  const DARK_CLASS = \"dark\";\n\nexport const DarkToggle = (props) => {\n\n    const systemPrefersDark = useMediaQuery(\n        {\n            query: \"(prefers-color-scheme: dark)\"\n        },\n        undefined,\n        prefersDark => {\n        setIsDark(prefersDark);\n        }\n    );\n\n    const [isDark, setIsDark] = useState(systemPrefersDark);\n\n\n    useEffect(() => {\n        if (isDark) document.documentElement.classList.add(DARK_CLASS)\n        else document.documentElement.classList.remove(DARK_CLASS)\n        \n    }, [isDark]);\n\n\n    if (props.display == 'none') return null\n    return (<>\n\n        <div  className=\"DarkToggle \" onClick={() => setIsDark(!isDark)} >{isDark? < UilSun/> : <UilMoon/>}</div>\n        \n        </>);\n};\n","// import { observer } from 'mobx-react-lite';\nimport { useContext } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { Context } from '../../index';\n\nimport { Pane } from 'evergreen-ui';\nimport './index.sass';\nimport { UilSortAmountDown, UilEnvelopeInfo, UilWrench, UilUserCircle, UilSignInAlt, UilConstructor} from '@iconscout/react-unicons';\nimport { DarkToggle } from './DarkToggle';\n\nconst Sidebar = () => {\n    const {store} = useContext(Context);\n\n    return(\n        <>\n        <Pane className='Sidebar'>\n\n            <NavLink  exact  to='/' activeClassName='sidebar-active' className=\"action-icon\"><UilSortAmountDown/></NavLink>\n            {/* <NavLink  to='/recently' activeClassName='sidebar-active' className=\"action-icon\"><UilEnvelopeInfo/></NavLink> */}\n            <NavLink  to='/reclamation' activeClassName='sidebar-active' className=\"action-icon\"><UilWrench/></NavLink>\n            <NavLink  to='/attendance' activeClassName='sidebar-active' className=\"action-icon\"><UilConstructor/></NavLink>\n\n\n            <a className=\"action-icon hidden\" ><DarkToggle/></a> \n            <NavLink  className=\"action-icon hidden\" to='/account'><UilUserCircle/></NavLink>\n            <NavLink  className=\"action-icon hidden\" to='/login' onClick={() => store.logout()}><UilSignInAlt/></NavLink>\n           \n            \n\n\n\n        </Pane>\n        </>\n    );\n}\n\nexport default Sidebar;","import { useContext } from 'react';\nimport { Context } from './index';\n\n// import ReactTooltip from 'react-tooltip';\nimport {observer} from 'mobx-react-lite';\n\nimport BaseLayout from './components/BaseLayout';\nimport Sidebar from './components/Sidebar/Sidebar';\nimport { DarkToggle } from './components/Sidebar/DarkToggle';\n\nfunction App() {  \n  const { store } = useContext(Context);\n\n\n  return (\n    <>\n      <div className=\"App\">\n        \n        {store.isAuth\n        ? <Sidebar/>\n        : null}\n\n          <DarkToggle display='none'/>\n          <BaseLayout/>\n        \n      </div>\n      {/* <ReactTooltip id='global' type=\"light\" place=\"bottom\" delayShow={300} className='tooltip'/> */}\n    </>\n  );\n}\n\nexport default observer(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from 'axios';\n\nexport const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:9000/api'\nexport const S3_URL = process.env.REACT_APP_API_URL || 'http://localhost:9000/s3/upload'\n\nconst $api = axios.create({\n    withCredentials: true,\n    baseURL: API_URL\n});\n\n$api.interceptors.request.use( (config) => {\n    config.headers.Authorization = `Bearer ${localStorage.getItem('token')}`\n    return config;\n})\n$api.interceptors.response.use( (config) => {\n    return config;\n}, async (error) => {\n    const originalRequest = error.config;\n    if(error.response.status === 401 && error.config && !error.config._isRetry){\n        originalRequest._isRetry = true;\n        try {\n            const response =  await axios.get(`${API_URL}/refresh`, {withCredentials: true});\n            localStorage.setItem('token', response.data.accessToken);\n            return $api.request(originalRequest);\n        } catch (e) {\n            console.log('Авторизация обломилась. Попробуйте снова');\n        }\n    }\n       \n})\n\nexport default $api;","import $api from \"../http\";\n\nexport default class AuthService {\n    \n    static async login(email, password){\n        return $api.post('/login',  {email, password})\n    }\n\n    static async logout(){\n        return $api.post('/logout')\n    }\n\n}","\nimport {makeAutoObservable} from 'mobx';\nimport {Pane, Spinner} from 'evergreen-ui';\nimport AuthService from '../services/AuthService';\nimport axios from 'axios';\nimport { API_URL } from '../http';\nimport { UilSortAmountDown, UilEnvelopeInfo, UilWrench, UilConstructor} from '@iconscout/react-unicons';\n\nexport default class Store {\n    user = {};\n    isAuth = false;\n    isLoading = false;\n    inMemoryToken = undefined;\n    priorityTab = 0;\n\n    constructor(){\n        makeAutoObservable(this);\n    }\n\n    setAuth(bool){\n        this.isAuth = bool;\n    }\n\n    setUser(user){\n        this.user = user;\n    }\n\n    setLoading(bool){\n        this.isLoading = bool;\n    }\n\n    setInMemoryToken(token){\n        this.inMemoryToken = token\n    }\n    setPriorutyTab(number){\n        this.priorityTab = number\n    }\n    async login(email, password){\n        try {\n            const response = await AuthService.login(email, password);\n            // localStorage.setItem('token', response.data.accessToken);\n\n            this.setInMemoryToken(response.data.accessToken)\n            this.setUser(response.data.user);\n            this.setAuth(true);\n            // window.location.href='/';\n            console.log('store', this.inMemoryToken)\n        } catch (e) {\n            console.log(e.response?.data?.message);\n        }\n    }\n\n    async logout(){\n        try {\n            await AuthService.logout();\n            localStorage.removeItem('token');\n            this.setAuth(false);\n            this.setUser({});\n        } catch (e) {\n            console.log(e.response?.data?.message);\n            \n        }\n    }\n\n    async checkAuth() {\n        this.setLoading(true);\n        try {\n            console.log('check auth request')\n            const response = await axios.get(`${API_URL}/refresh`, {withCredentials: true});\n            this.setInMemoryToken(response.data.accessToken)\n\n            this.setUser(response.data.user);\n            this.setAuth(true);\n\n            return {\n                'isLoaded': true,\n                'isAuth': this.isAuth\n                }\n        } catch (e) {\n            console.log(e.response?.data?.message);\n            return {\n                'isLoaded': true,\n                'isAuth': this.isAuth\n            }\n\n        } finally {\n            this.setLoading(false);\n        }\n        \n    }\n\n    async uploadFile(acceptedFiles){\n        const formData = new FormData()\n        acceptedFiles.map(file => formData.append('files', file))\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/s3/upload`, formData, {\n            headers: {\n              \"Content-Type\": \"multipart/form-data\",\n            }\n          });\n        return res\n    }\n\n    async downloadFile(file){\n        const res = await fetch(`${process.env.REACT_APP_API_URL}/s3/get/${file.Key}`)\n\n        if (res.status == 200 ){\n            const blob = await res.blob()\n            const downloadURL = window.URL.createObjectURL(blob)\n            const link = document.createElement('a')\n            link.href = downloadURL\n            link.download = file.FileName\n            document.body.appendChild(link)\n            link.click()\n            link.remove()\n        }\n    }\n\n    async deleteFile(key, deleteFileMutation){\n        const res = await axios.get(`${process.env.REACT_APP_API_URL}/s3/delete/${key}`);\n\n        if (res.status == 200){\n            const hasuraRes = await deleteFileMutation({variables: {\n                'key': key,\n            }})\n            console.log(hasuraRes.data)\n        }\n        // if (res.status != 200) console.log('error during deleting file from S3', res)\n    }\n\n    pageParams = [\n        {\n            'url' : '/',\n            'icon': <UilSortAmountDown/>,\n            'title': 'Очередность выполнения',\n        },\n        {\n            'url' : '/recently',\n            'icon': <UilEnvelopeInfo/>,\n            'title': 'Недавние',\n        },\n        {\n            'url' : '/reclamation',\n            'icon': <UilWrench/>,\n            'title': 'Рекламация',\n        },\n        {\n            'url' : '/attendance',\n            'icon': <UilConstructor/>,\n            'title': 'Рабочее время',\n        },\n    ];\n\n    getPageParams(url){\n        const page = this.pageParams.find((el) => el.url === url)\n        return page\n    }\n\n    preloader = <Pane display=\"flex\" alignItems=\"center\" justifyContent=\"center\" height='75vh'><Spinner /></Pane>\n}\n","import {WebSocketLink} from 'apollo-link-ws';\nimport React, { createContext } from 'react';\nimport ReactDOM from 'react-dom';\nimport './theme.css';\nimport './index.sass';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Store from './store/store';\nimport 'react-notifications/lib/notifications.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n} from \"@apollo/client\";\n\n\nconst store = new Store();\n\nexport const Context = createContext({\n  store,\n});\n\n\nconst webSocketLink = new WebSocketLink({\n  uri: process.env.REACT_APP_HASURA_WS,\n  options: {\n    reconnect: true,\n    lazy: true,\n    minTimeout: 1000,\n    inactivityTimeout: 30000,\n    connectionCallback: async () => {\n        console.log('gql error. Request new access token');\n        await store.checkAuth()\n    },\n    connectionParams: () => ({\n      headers: {\n        'Authorization' : `Bearer ${store.inMemoryToken}`\n      }\n    }),\n    \n  }\n})\n\n\nconst apolloClient = new ApolloClient({\n  link: webSocketLink,\n  cache: new InMemoryCache()\n})\n\nconst root = document.getElementById('root');\n\nReactDOM.render(\n  <ApolloProvider client={apolloClient}>\n    <BrowserRouter>\n      <App sessionData={root.dataset.session}>\n        <Context.Provider value={store}>\n        \n        </Context.Provider>\n      \n    </App>\n    </BrowserRouter>\n    </ApolloProvider>\n,\n  root\n);\n\nreportWebVitals();\n"],"sourceRoot":""}