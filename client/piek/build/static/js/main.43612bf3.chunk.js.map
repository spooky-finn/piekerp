{"version":3,"sources":["components/LoginForm/index.js","hasura-queries/getOrders.js","components/PriorityLayout/tableLogic.js","hasura-queries/MutationOrderStatus.js","components/PreOrders/index.js","components/BaseHeader/index.js","components/BaseHeader/ActionsHeader.js","components/PriorityLayout/index.js","components/RecentlyLayout/index.js","components/RecentlyLayout/tableLogic.js","hasura-queries/getOrderByID.js","components/OrderLayout/OrderComposition.jsx","components/OrderLayout/OrderMeta.jsx","hasura-queries/MutationCheckListUnit.js","components/OrderLayout/CheckList.jsx","components/OrderLayout/Docs.jsx","components/OrderLayout/index.jsx","hasura-queries/attendance/getUsers.js","components/Attendance/functions.js","components/Attendance/table.js","components/Attendance/ReportConfigurator.jsx","components/Attendance/index.js","routers/PrivateRoute.js","routers/Router.js","components/BaseLayout/index.js","components/Sidebar/DarkToggle.js","components/Sidebar/Sidebar.js","App.js","reportWebVitals.js","http/index.js","services/AuthService.js","store/store.js","index.js"],"names":["observer","props","useState","email","setEmail","password","setPassword","store","useContext","Context","Pane","className","Heading","marginBottom","size","fontWeight","color","TextInputField","width","inputHeight","minorScale","label","value","onChange","e","target","Button","onClick","login","GetOrdersSubscription","gql","setPaidPercent","total","paid","toFixed","getShippingDate","SD","split","slice","columnsList","Header","id","accessor","_row","counter","data","to","OrderID","OrderItems","map","item","Name","OrderItemID","Quantity","order","ShippingDate","InvoiceNumber","TotalAmount","PaidAmount","Table","columns","heading","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","length","headerGroup","i","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps","MUTATE_ORDER_STATUS","PreOrders","showPreOrders","setShowPreOrders","useMutation","mutationOrderStatus","dt","preOrders","handleToggle","growDiv","document","getElementById","clientHeight","style","height","newColumnList","push","variables","OrderStatus","splice","indexOf","onClickTransfer","BaseHeader","pageParams","icon","title","SearchInput","search","ActionsHeader","data-for","data-tip","PriorityLayout","orders","useSubscription","error","loading","erp_Orders","sort","a","b","forEach","ID","useMemo","getPageParams","window","location","pathname","preloader","RecentlyLayout","groupedData","days","moment","subtract","format","isAdded","day","date","objs","name","groupOrders","console","log","children","GET_ORDER_BY_ID","OrderComposition","el","OrderMeta","OrderNumber","User","FirstName","LastName","Entity","City","Comment","MUTATE_CHECKLIST_UNIT","CheckList","updateCheckListUnit","propsData","JSON","parse","stringify","Point","units","IsComplited","classList","toggle","CheckListUnitID","IsCompluted","toggleCheckListUnit","Docs","file","setFile","submit","preventDefault","formData","FormData","append","uploadFile","onSubmit","method","encType","files","type","OrderLayout","useQuery","fetchPolicy","useParams","CheckListUnits","GET_USERS","daysInMonth","selectedMonth","month","year","Date","getDate","getIntervalData","intervals","timeDeduction","getMinutes","t","minutes","find","entrance","_entr","_exit","exit","getHours","number","hour","Math","floor","decpart","min","round","minute","convertInterval","interval","status","monthAdd","temp","getFullYear","getMonth","setMonth","setDate","ReportConfigurator","months","d","attributes","setSelectedMonth","m","suitable","chooseMonth","defaultValue","onMouseLeave","setTimeDeduction","Attendance","setSearch","parseInt","toString","replace","gte","lte","getVarsForSubscription","lastname","firstname","Cell","hours","original","intervalsPools","generateColumns","req","attendance_users_aggregate","nodes","PrivateRoute","Component","component","rest","undefined","isLoaded","setisLoaded","isAuth","setisAuth","checkAuth","res","useEffect","localStorage","getItem","href","AppRouter","path","LoginForm","exact","BaseLayout","DARK_CLASS","DarkToggle","systemPrefersDark","useMediaQuery","query","prefersDark","setIsDark","isDark","documentElement","add","remove","display","Sidebar","activeClassName","logout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","API_URL","process","$api","axios","create","withCredentials","baseURL","interceptors","request","use","config","Authorization","response","originalRequest","_isRetry","get","setItem","accessToken","AuthService","post","Store","user","isLoading","alignItems","justifyContent","Spinner","makeAutoObservable","this","bool","setUser","setAuth","message","removeItem","setLoading","url","createContext","root","ReactDOM","client","ApolloClient","link","WebSocketLink","uri","options","reconnect","connectionParams","cache","InMemoryCache","sessionData","dataset","session","Provider"],"mappings":"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","file":"static/js/main.43612bf3.chunk.js","sourcesContent":["import { observer } from 'mobx-react-lite';\nimport React, { useState, useContext } from 'react';\n// import {NotificationContainer, NotificationManager} from 'react-notifications';\nimport { Context } from '../../index';\n\nimport {Heading, TextInputField, Pane, minorScale, Button } from 'evergreen-ui';\nimport './LoginForm.sass'\nimport '../../theme.css'\n\n\nconst LoginForm = (props) => {\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const {store} = useContext(Context);\n\n    // const setNotification = () => {\n    //     NotificationManager.error('Похоже вы ошиблись', '\t(ಥ﹏ಥ)', 3000);\n    // }\n\n    return(\n        <>\n              <Pane className='loginCard'>\n                    <Heading marginBottom={24} size={20} fontWeight={900} color='var(--text1) '>Войти</Heading>\n                    <TextInputField\n                    className='LoginInput'\n                    width='300px'\n                    inputHeight={minorScale(10)}\n                    label=\"Email\"\n                    value={email}\n                    onChange={e => setEmail(e.target.value)}\n                  />\n                  <TextInputField\n                    label=\"Пароль\"\n                    className='LoginInput'\n                    inputHeight={minorScale(10)}\n                    value={password}\n                    onChange={e => setPassword(e.target.value) }\n                  />\n                  <Button className=\"Button\"\n                    width='300px'\n                    size=\"large\"\n                    onClick={() => store.login(email, password) }\n                  >Войти</Button>\n              </Pane>\n     \n        {/* <NotificationContainer/> */}\n        </>\n    );\n}\n\nexport default observer(LoginForm);\n","import gql from 'graphql-tag'; \n\n\n\n// Выбираем заказы находящиеся только в Прездаказах и в производстве \n//   OrderStatusID \n//     1 - В производстве\n//     3- Предзаказ\n//     4- Выпущен и отгружен\n// \n\nexport const GetOrdersSubscription = gql`\nsubscription GetOrders {\n    erp_Orders(where: {OrderStatusID: {_neq: 4}}) {\n      OrderID\n      Entity\n      InvoiceNumber\n      City\n      ShippingDate\n      PaidAmount\n      TotalAmount\n      OrderStatus {\n        Name\n        ID\n      }\n      OrderItems {\n        Quantity\n        OrderItemID\n        Name\n        OrderID\n        \n      }\n      \n    }\n  }\n\n`","import { useTable } from 'react-table'\nimport {Heading} from 'evergreen-ui';\nimport { Link } from 'react-router-dom'\n\n\nexport const setPaidPercent = (total, paid) => {\n    if (!total || !paid){\n        return ' '    \n    }\n    return ' - ' + ((paid/total) * 100).toFixed(0) + '%'\n}\n\nexport const getShippingDate = (SD) => {\n  return SD.split(\"-\")[2] + '.' + SD.split(\"-\")[1] + '.' + SD.split(\"-\")[0].slice(2)\n}\n\nexport const columnsList = [\n    {\n      Header: '',\n      id: 'index',\n      accessor: (_row: any, counter) => counter +1\n    },\n    {\n      Header: 'Наим.',\n      id: \"orderItems\",\n      accessor: data =>\n      <Link to={`/order/${data.OrderID}`}>\n          {data.OrderItems.map(item => (\n            <div key={item.OrderItemID} >\n              <span>{item.Name}</span>\n            </div>\n          ))}\n        </Link>\n    },\n    {\n      Header: 'Кол-во',\n      accessor: data =>\n      data.OrderItems.map(item => (\n      <div key={item.OrderItemID} >\n        <div>{item.Quantity}</div>\n      </div>\n      ))\n    },\n    {\n      Header: 'Отгрузка',\n      accessor: order => getShippingDate(order.ShippingDate)\n     ,\n    },\n    {\n      Header: 'Счет- оплата',\n      accessor: data => \n      '№ ' + data.InvoiceNumber + setPaidPercent(data.TotalAmount, data.PaidAmount),\n    },\n    {\n      Header: 'Компания',\n      accessor: 'Entity',\n    },\n    {\n      Header: 'Гор.',\n      accessor: 'City',\n    },\n    {\n      Header: 'Перв. платеж',\n      accessor: 'ShippingDate',\n    },\n  ]\n  \nexport default function Table({columns, data, id, heading}){\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n      } = useTable({\n        columns,\n        data,\n      })\n\n\n    if (data.length == 0) return null;\n\n   return (\n     <>\n\n    <Heading className='group-heading'>{heading}</Heading>\n    <table id={id} className=\"priority-table\" {...getTableProps()}>\n      <thead>\n        {headerGroups.map((headerGroup, i) => (\n          <tr key={i} {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map((column, i) => (\n              <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {rows.map((row, i) => {\n          prepareRow(row)\n          return (\n               <tr {...row.getRowProps()}>\n              {row.cells.map((cell, i) => {\n                return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n              })}\n              </tr>\n          )\n        })}\n      </tbody>\n    </table>\n    </>\n  )\n}\n\n\n","import {gql} from 'graphql-tag'; \n\n//   OrderStatusID \n//     1 - В производстве\n//     3- Предзаказ\n//     4- Выпущен и отгружен\n// \n\nexport const MUTATE_ORDER_STATUS = gql`\n    mutation MyMutation($OrderID: Int!, $OrderStatus: Int!){\n    update_erp_Orders_by_pk(pk_columns: {OrderID: $OrderID}, _set: {OrderStatusID: $OrderStatus}) {\n        OrderID\n    }\n  }\n\n`;","import { useState, useEffect } from \"react\";\nimport {  Heading} from 'evergreen-ui';\nimport {UilAngleRight, UilPlus} from '@iconscout/react-unicons';\nimport './index.sass'\nimport Table, { columnsList } from '../PriorityLayout/tableLogic';\nimport { MUTATE_ORDER_STATUS } from \"../../hasura-queries/MutationOrderStatus\";\nimport { useMutation } from '@apollo/client';\n\nconst PreOrders = (props) => {\n    const [showPreOrders, setShowPreOrders] = useState(false);\n\n    const [mutationOrderStatus, { data }] = useMutation(MUTATE_ORDER_STATUS);\n\n\n    let dt = props.preOrders\n    \n        const handleToggle = () => {\n            setShowPreOrders(!showPreOrders);\n            var growDiv = document.getElementById('grow');\n            if (growDiv.clientHeight == 0) growDiv.style.height = document.getElementById('measuringWrapper')?.clientHeight + 10+ 'px';\n            else growDiv.style.height = 0;\n          };\n          \n    \n        const onClickTransfer = (data) => {\n          mutationOrderStatus({ variables: { OrderID: data.OrderID, OrderStatus: 1 } })\n          dt.splice(dt.indexOf(data), 1)\n          if (dt.length == 0) handleToggle()\n        }\n\n\n    var newColumnList = [...columnsList];\n\n    newColumnList.push({\n        Header: ' ',\n        accessor: data => \n        <div onClick={() => onClickTransfer(data)} className=\"acceptOrderButton\"><UilPlus/></div>\n        ,\n      })\n\n    return(\n        <>\n    \n        <div className={showPreOrders ? \"preorders-container active\" : \"preorders-container\"} >\n      \n          <Heading  onClick={handleToggle} className='group-heading preorders-heading'> Предзаказы <span><UilAngleRight/></span>\n          </Heading>\n\n            <div id=\"grow\">\n              <Table id=\"measuringWrapper\" columns={newColumnList} data={props.preOrders} />\n            </div>\n        </div>\n       \n        </>\n    )\n}\n\nexport default PreOrders","import { Heading, SearchInput, minorScale } from 'evergreen-ui';\n\n\nconst BaseHeader = (props) => {\n\n    return(\n           <div className=\"base-container page-header\">\n                    <span>{props.pageParams.icon}</span>\n                    <Heading>{props.pageParams.title}</Heading>\n                    <div className=\"search-box\"><SearchInput height={minorScale(10)}  onChange={(e) => props.search(e)} className=\"search-input\" /></div>\n            </div>\n    )\n}\n\nexport default BaseHeader","import {UilPrint, UilPlus, UilBell} from '@iconscout/react-unicons';\n\n\n\nconst ActionsHeader = (props) => {\n\n    return(\n        <div className=\"action-block\">\n            <div data-for='global' data-tip=\"Распечатать\" className=\"action-icon\"><UilPrint/></div>\n            <div data-for='global' data-tip=\"Добавить\" className=\"action-icon\"><UilPlus/></div>\n            <div data-for='global' data-tip=\"Уведомления\" className=\"action-icon\"><UilBell/></div>\n        </div>\n    )\n}\n\nexport default ActionsHeader","import { useMemo, useEffect, useContext } from 'react'\nimport { Context } from '../../index'\n\nimport { useSubscription } from '@apollo/client'\nimport { GetOrdersSubscription } from '../../hasura-queries/getOrders'\n\nimport Table, { columnsList } from './tableLogic'\nimport PreOrders from '../PreOrders'\nimport BaseHeader from '../BaseHeader'\nimport ActionsHeader from '../BaseHeader/ActionsHeader'\n\n\nconst PriorityLayout = (props) => {\n    let preOrders = [];\n    let orders = [];\n    const { store } = useContext(Context);\n\n    const { error, loading, data = [] } = useSubscription(GetOrdersSubscription);\n\n    if (data.erp_Orders) {\n        data.erp_Orders.sort((a, b) => b.ShippingDate < a.ShippingDate ? 1 : -1);\n\n        //отбираем предзаказы\n        data.erp_Orders.forEach((order) => {\n            if (order.OrderStatus.ID == 3) preOrders.push(order)\n            else if (order.OrderStatus.ID == 1) orders.push(order)\n        });\n    }\n    \n    const columns = useMemo(\n        () => columnsList, []\n    )\n\n    return ( \n        <>\n        <ActionsHeader />\n        <div className=\"Container-1200\">\n            <BaseHeader pageParams = { store.getPageParams(window.location.pathname) }/> \n        \n\n            {data.erp_Orders && preOrders ? ( \n            <>\n                <PreOrders preOrders = { preOrders }/>\n                <Table columns = { columns } data = { orders }/>\n                </>\n            ) : store.preloader\n        } \n        </div>\n        </>\n    )\n}\nexport default PriorityLayout;","import { useState, useMemo, useContext } from 'react';\nimport { Context } from '../..';\nimport {useSubscription} from '@apollo/client';\nimport PreOrders from '../PreOrders'\nimport { GetOrdersSubscription } from '../../hasura-queries/getOrders';\nimport BaseHeader from '../BaseHeader';\nimport ActionsHeader from '../BaseHeader/ActionsHeader';\nimport './index.sass'\n\nimport Table, {columnsList} from '../PriorityLayout/tableLogic';\nimport  {groupOrders} from './tableLogic'\n\n// поменять сортировку на день первой оплаты\n\nconst RecentlyLayout = (props) => {\n    let preOrders = []; \n    let orders = [];\n    const {store} = useContext(Context);\n    var groupedData = null;\n\n    const {error, loading, data = {} } = useSubscription(GetOrdersSubscription);\n\n        if (data.erp_Orders){  \n            data.erp_Orders.sort((a, b) => b.ShippingDate < a.ShippingDate ? 1: -1);  \n\n            //отбираем предзаказы\n            data.erp_Orders.forEach((order)=> {\n\n                if (order.OrderStatus.ID == 3) {\n                    preOrders.push(order);\n\n                }else if (order.OrderStatus.ID == 1) {\n                    orders.push(order);\n                }\n            });\n\n            groupedData = groupOrders(orders);\n        }\n        \n    const columns = useMemo(\n        () => columnsList,\n        []\n      )\n    \n\n    return(\n         <>\n        <ActionsHeader/>\n        <div className=\"Container-1200\">\n            <BaseHeader pageParams={store.getPageParams(window.location.pathname)} />\n            \n            {groupedData\n            ? (\n                <>\n                <PreOrders preOrders={preOrders}/>\n                {console.log(groupedData)}\n                <Table columns={columns} data={groupedData[0].objs} heading=\"Сегодня\"/>\n                <Table columns={columns} data={groupedData[1].objs} heading=\"Вчера\"/>\n                <Table columns={columnsList} data={groupedData[2].objs} />\n                </> \n            ) : store.preloader }\n\n        </div>\n       \n        {props.children}\n        </>\n    );\n}\n\n\nexport default RecentlyLayout","import moment from 'moment' \nimport setPaidPercent from '../PriorityLayout/tableLogic'\n\n\nexport const groupOrders = (orders) => {\n    let days = [{\n        'name': 'Сегодня',\n        'date': moment().subtract(0, \"day\").format(\"YYYY-MM-DD\"),\n        'objs': []}, \n        { 'name': 'Вчера',\n        'date': moment().subtract(1, \"day\").format(\"YYYY-MM-DD\"),\n        'objs': []}, \n        { 'name': '',\n        'objs': [] },\n        ]\n        \n    if (orders){\n        \n        for (const order of orders){\n            let isAdded = false;\n\n            days.forEach( (day) => {\n                if (order.ShippingDate === day.date){\n                    day.objs.push(order);\n                    isAdded = true;\n                } else if(day.name === '' && !isAdded) day.objs.push(order)\n            })}\n    }\n    \n    return days;\n};\n","import gql from 'graphql-tag'\n\nexport const GET_ORDER_BY_ID = gql`\nquery MyQuery($OrderID: Int!) {\n  erp_Orders(where: {OrderID: {_eq: $OrderID}}) {\n    City\n    CreatingDate\n    Comment\n    Entity\n    InvoiceNumber\n    IsReclamation\n    ManagerID\n    OrderID\n    OrderNumber\n    OrderStatusID\n    PaidAmount\n    ShipmentComment\n    ShippingDate\n    TotalAmount\n    User {\n      FirstName\n      LastName\n      UserID\n    }\n    OrderItems {\n      Fitter\n      Name\n      OrderItemID\n      OrderID\n      Quantity\n      SerialNumber\n    }\n    CheckListUnits {\n      IsComplited\n      OrderID\n      Point\n      CheckListUnitID\n    }\n  }\n}\n`","\nconst OrderComposition = (props) => {\n\n    return(\n        <div className=\"Composition\">                    \n            {props.data.map( el => \n\n                <div key={el.OrderItemID} className=\"Unit\">\n\n                    <div className=\"Name\"> {el.Name} </div>\n\n                    <div  className=\"Quantity\"> {el.Quantity}</div>\n                    <div>Сборщик</div>\n                    <div>Сер номер</div>\n\n                </div>\n            )}\n            \n        </div>\n    )\n}\n\nexport default OrderComposition","import { getShippingDate, setPaidPercent } from \"../PriorityLayout/tableLogic\";\nimport { UilHistoryAlt } from \"@iconscout/react-unicons\";\nimport \"./order-meta.sass\";\n\nconst OrderMeta = (props) => {\n  const FormatShippingDate =\n    props.data.ShippingDate.split(\"-\")[2] +\n    \".\" +\n    props.data.ShippingDate.split(\"-\")[1] +\n    \".\" +\n    props.data.ShippingDate.split(\"-\")[0].slice(2);\n\n  return (\n    <>\n      <div className=\"SignificantInfo\">\n            <div>\n                <pre>План. отгрузка</pre>\n                {getShippingDate(props.data.ShippingDate)}\n            </div>\n            <div>\n                <pre>Счет / оплата</pre>\n                {\"№ \" +\n                props.data.InvoiceNumber +\n                setPaidPercent(props.data.TotalAmount, props.data.PaidAmount)}\n                    <span className=\"PaymentHistory\">\n                        <UilHistoryAlt />\n                    </span>\n            </div>\n      </div>\n\n      <div className=\"MetaWrapper\">\n           <div className='Left'>\n                <div>\n                    <pre>Номер заказа</pre>\n                    {props.data.OrderNumber}\n                </div>\n                <div>\n                    <pre>Создан</pre>\n                    {props.data.ShippingDate}\n                </div>\n                <div>\n                    <pre>Менеджер</pre>\n                    {props.data.User.FirstName} {props.data.User.LastName}\n                </div>\n           </div>\n\n           <div className='Right'>\n                    <div>\n                        <pre>Юр Лицо</pre>\n                        {props.data.Entity}\n                    </div>\n                    <div>\n                        <pre>Гор</pre>\n                        {props.data.City}\n                    </div>\n            </div>\n      </div>\n\n      <div className=\"OrderComment\">\n            <pre>Комментарий</pre>\n            {props.data.Comment}\n      </div>\n    </>\n  );\n};\n\nexport default OrderMeta;\n","import {gql} from 'graphql-tag'; \n\nexport const MUTATE_CHECKLIST_UNIT = gql`\nmutation MyMutation($CheckListUnitID: Int!, $IsCompluted: Boolean!) {\n  update_erp_CheckListUnits_by_pk(pk_columns: {CheckListUnitID: $CheckListUnitID}, _set: {IsComplited: $IsCompluted}) {\n    CheckListUnitID\n    IsComplited\n    Point\n  }\n}\n`","import { useMutation } from \"@apollo/client\"\nimport { MUTATE_CHECKLIST_UNIT } from '../../hasura-queries/MutationCheckListUnit'\n\nconst CheckList = (props) => {\n\n    const [updateCheckListUnit, { loading }] = useMutation(MUTATE_CHECKLIST_UNIT);\n\n    let propsData = JSON.parse(JSON.stringify(props.data))\n\n        propsData.sort((a, b) => b.Point < a.Point ? 1 : -1)\n\n        const toggleCheckListUnit = (target, el) => {\n            target.target.classList.toggle('complited')\n            updateCheckListUnit({ variables: { CheckListUnitID: el.CheckListUnitID, IsCompluted: !el.IsComplited } })\n    }\n\n    const units = propsData.map(el => \n            <div className={el.IsComplited ? \"CheckListUnit complited\" : \"CheckListUnit\"}  \n                key={el.CheckListUnitID} \n                onClick={ target => toggleCheckListUnit(target, el) }>\n                {el.Point}\n            </div>\n        )\n\n\n\n\n   \n    return(\n        <> \n         <div>{units}</div>\n        </>\n    )\n}\n\nexport default CheckList","import { useState, useContext } from 'react';\nimport { Context } from '../../index'\n\n\n\n\nconst Docs = (props) => {\n    const {store} = useContext(Context)\n    const [file, setFile] = useState(' ');\n    \n    const submit = async (e) => {\n        e.preventDefault()\n        const formData = new FormData()\n        formData.append('file', file)\n        store.uploadFile(formData)\n\n    }\n\n    const fileSelected = (e) => {\n        const file = e.target.files[0]\n        setFile(file)\n        console.log('sets file', file)\n    }\n\n    return (\n        <>\n        <div>\n            <form onSubmit={submit} method=\"post\" encType=\"multipart/form-data\">\n                <input  onChange={fileSelected} type=\"file\" name='file'/>\n                <button type='submit'>Submit</button>\n            </form>\n            \n        </div>\n        </>\n    )\n\n}\n\nexport default Docs","import { useContext } from \"react\";\nimport { Context } from \"../..\";\nimport {useParams } from \"react-router-dom\"\nimport { useQuery } from '@apollo/client'\nimport { GET_ORDER_BY_ID } from '../../hasura-queries/getOrderByID'\nimport ActionsHeader from \"../BaseHeader/ActionsHeader\";\nimport './index.sass'\n\nimport OrderComposition from \"./OrderComposition\";\nimport OrderMeta from \"./OrderMeta\";\nimport CheckList from './CheckList';\nimport Docs from './Docs';\nimport Comments from \"./Comments\";\nimport { Heading } from 'evergreen-ui';\n\n\nconst OrderLayout = (props) => {\n    const {store} = useContext(Context);\n\n    const {loading, error, data = [] } = useQuery(GET_ORDER_BY_ID, {  fetchPolicy: \"no-cache\", variables: { OrderID: useParams().id }});\n    console.log('запрос ')\n\n\n    return(\n    <>\n         <ActionsHeader/>\n\n         {data.erp_Orders ? (<>\n\n        <div className=\"page-header\"><Heading>{data.erp_Orders[0].Entity} __  {data.erp_Orders[0].City}</Heading></div>\n\n        <section className=\"OrderLayout\">\n                    <div className=\"Main\">\n                        <OrderComposition data={data.erp_Orders[0].OrderItems}/> \n                        <div className=\"WrapperTwoCol\">\n\n                            <div className=\"CheckList\">\n                                <CheckList data={data.erp_Orders[0].CheckListUnits}/>\n                            </div>\n\n                            <div className=\"Docs\">\n                                <Docs data={data.erp_Orders[0].Docs} />\n                            </div>\n                           \n                        </div>\n                       \n                        {/* <Comments/> */}\n                    </div>\n                    <div className=\"Meta\">\n                         <OrderMeta data={data.erp_Orders[0]}/>\n                    </div>\n                   \n\n\n        </section> \n              </>): store.preloader}\n\n           \n    </>\n    )\n}\n\nexport default OrderLayout","import gql from 'graphql-tag'; \n\nexport const GET_USERS = gql`\nsubscription MyQuery($gte: timestamp!, $lte: timestamp!, $search: String!) {\n  attendance_users_aggregate(\n    order_by: {lastname: asc},\n    where: {_or: [ {firstname: {_ilike: $search}}, {lastname: {_ilike: $search}} ] }\n    ){\n    nodes {\n      id\n      card\n      firstname\n      lastname\n      intervalsPools(where: {entrance: {_gte: $gte,  _lte: $lte}}) {\n        entrance\n        exit\n        card\n        interval\n        status\n      }\n    }\n  }\n}  \n`\n\n\n","\nexport function daysInMonth (selectedMonth) {\n    // количество дней в текущем месяце\n      const [month, year] = selectedMonth\n      return new Date(year, month+1, 0).getDate();\n}\n\n\n  \n\n\nexport function getVarsForSubscription(selectedMonth){\n  const [month, year] = selectedMonth\n  // +1 because in js mounths start since 0, whereas hasura timestamp starts 1\n  var a = (parseInt(month)+1).toString()\n\n  // this expression add zero to mothh if minth.length < 2 ( 5 > 05 )\n  const m = a.replace(/(^|\\D)(\\d)(?!\\d)/g, '$10$2')\n\n  const gte = year+ \"-\"+ m +\"-01T00:00:00\";\n  const lte = year+ \"-\"+ m +\"-\" +daysInMonth(selectedMonth)+ \"T23:59:59\";\n  return {gte, lte}\n}","import { useTable } from 'react-table'\nimport { daysInMonth } from './functions'\n\nexport function generateColumns(selectedMonth, timeDeduction){\n  let columnsList = [\n      {\n      Header: 'Сотрудник',\n      accessor: data =>\n      <div>\n        <span>{data.lastname} </span>\n        <span>{data.firstname} </span>\n      </div>\n    }, \n    {\n      Header: 'Итого',\n      Cell: row => {\n        var hours = 0;\n        const intervals = row.row.original.intervalsPools\n        intervals.forEach( interval => {\n          hours += interval.interval \n        });\n\n        //вычетаем время на обед\n        hours -= timeDeduction/60 * intervals.length\n\n        return <div>{hours.toFixed(0)}</div>\n      }\n    }\n  ]\n\n  for (var day=1; day<= daysInMonth(selectedMonth); day++){\n    columnsList.push({\n      Header: day.toString(),\n      Cell: row => {\n        const day1 = row.column.Header\n\n        const [entrance, exit, interval, status] = getIntervalData(day1, row.row.original.intervalsPools, timeDeduction)\n        return (\n          <div className={\"status-\"+ status}> \n            <div className=\"eventTime\">{ entrance }</div> \n            <div className=\"eventTime\">{ exit }</div>\n            <div className=\"interval\">{ interval }</div>\n          \n          </div>\n        )\n      }\n    })\n  }\n  return columnsList\n}\n\n\n\nfunction getIntervalData(day, intervals, timeDeduction){\n\n    // конвертация float в часы и минуты\n    function convertInterval(number, timeDeduction){\n        //вычетаем время на обед\n        number -= timeDeduction/60\n\n        var hour = Math.floor(number);\n        var decpart = number - hour;\n        var min = 1 / 60;\n\n        // Round to nearest minute\n        decpart = min * Math.round(decpart / min);\n        var minute = Math.floor(decpart * 60) + '';\n\n        // Add padding if need\n        if (minute.length < 2) {\n            minute = '0' + minute; \n        }\n\n        return hour + ':' + minute;\n    }\n\n    function getMinutes(t){\n        const minutes = t.getMinutes()\n        return (minutes < 10) ? `0${minutes}` : minutes\n    }\n\n    const e = intervals.find(el =>  new Date(el.entrance).getDate() == day)\n\n    if (e) {\n        const _entr = new Date(e.entrance)\n        const _exit = new Date(e.exit)\n\n        const entrance = _entr.getHours()+':'+ getMinutes(_entr)\n        const exit = _exit.getHours()+':'+ getMinutes(_exit)\n        const interval = convertInterval(e.interval, timeDeduction)\n\n        return [entrance, exit, interval, e.status]\n    }   else return [null, null, null, null]\n}\n\nexport default function Table({columns, data, id, heading}){\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n      } = useTable({\n        columns,\n        data,\n      })\n\n\n    if (data.length == 0) return null;\n\n   return (\n     <>\n    <table id={id} className=\"attendance-table\" {...getTableProps()}>\n      <thead>\n        {headerGroups.map((headerGroup, i) => (\n          <tr key={i} {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map((column, i) => (\n              <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {rows.map((row, i) => {\n          prepareRow(row)\n          return (\n                <tr {...row.getRowProps()}>\n                {row.cells.map((cell, i) => {\n                  return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                })}\n                </tr>\n          )\n        })}\n      </tbody>\n    </table>\n    </>\n  )\n}\n\n\n","\nfunction monthAdd(date, month) {\n    // функция используется для корректного вычитания месяцев в chooseMonth\n    var temp = date;\n    temp = new Date(date.getFullYear(), date.getMonth(), 1);\n    temp.setMonth(temp.getMonth() + (month + 1));\n    temp.setDate(temp.getDate() - 1); \n  \n    if (date.getDate() < temp.getDate()) { \n        temp.setDate(date.getDate()); \n    }\n    return temp;    \n  }\n\nconst ReportConfigurator = (props) => {\n\n    const date = new Date()\n    const months = [\"янв\", \"фев\", \"мар\", \"апр\", \"май\", \"июн\", \"июл\", \"авг\", \"сен\", \"окт\", \"ноя\", \"дек\"];\n\n\n    console.log('рендер ребенка')\n\n    const handleToggle = (e) => {\n        const d = new Date(e.target.attributes.date.value)\n        props.setSelectedMonth([d.getMonth(), d.getFullYear()])\n    }\n\n    const chooseMonth = () => {\n        const m = []\n        \n        for (var i=0; i< 9; i++) {\n            const suitable = monthAdd(date, -i)\n            m.push(\n                <div onClick={handleToggle} \n                    className={suitable.getMonth() == props.selectedMonth[0] ? 'active' : ''}\n                    date={suitable}> {months[suitable.getMonth()]} </div>\n                )\n        } \n        return <div className=\"chooseMonth\">{m}</div>\n    }\n\n    return (\n        <div className=\"reportConfigurator\">\n        {chooseMonth()}\n        \n        <div className=\"arguments\">\n            <div className=\"wrap\">\n                <span>обед</span>\n                <input type='text' defaultValue={props.timeDeduction} onMouseLeave={e => props.setTimeDeduction(e.target.value)}/>\n                <span>мин</span>\n            </div>\n            \n            <div className=\"wrap\">\n                <span>норма</span>\n                <input type='text' defaultValue={props.timeDeduction}/>\n                <span>ч</span>\n            </div>\n        </div>\n    </div>\n    )\n}\n\nexport default ReportConfigurator","import { useContext, useMemo, useState, useRef, useEffect } from 'react'\nimport { Context } from '../../index'\nimport { useSubscription } from '@apollo/client'\n\nimport { GET_USERS } from '../../hasura-queries/attendance/getUsers' \n\nimport Table, { generateColumns } from './table'\nimport { getVarsForSubscription } from './functions'\n\nimport './index.sass'\nimport ReportConfigurator from './ReportConfigurator'\nimport BaseHeader from '../BaseHeader'\n\n// учет рабочего времени\nconst Attendance = props => {\n    const date = new Date()\n\n    const { store } = useContext(Context);\n\n    const [selectedMonth, setSelectedMonth] = useState([date.getMonth()-1, date.getFullYear()])\n    const [timeDeduction, setTimeDeduction] = useState(30)    \n    const [search, setSearch] = useState('');\n\n\n    console.log(timeDeduction, 'рендер основного компонента')\n\n    const {gte, lte} = getVarsForSubscription(selectedMonth)\n\n    const {loading, error, data = [] } = useSubscription(GET_USERS, { variables: { gte, lte, search: '%'+search+'%' } });\n\n\n\n    // useEffect(() => {\n    //     setColumns(generateColumns(selectedMonth, timeDeduction))\n    // }, [timeDeduction]);\n\n    const columns = useMemo(\n        () => generateColumns(selectedMonth, timeDeduction)\n      , [timeDeduction]\n    )\n    \n\n    const onChangeSearch = (e) => {\n        const req = e.target.value.replace(/\\s/g, '')\n        setSearch(req)\n    }\n\n   \n    return(\n        <>\n            <BaseHeader pageParams = { store.getPageParams(window.location.pathname) } search={onChangeSearch} /> \n            <ReportConfigurator \n                setSelectedMonth={setSelectedMonth}\n                selectedMonth={selectedMonth}\n                timeDeduction={timeDeduction}\n                setTimeDeduction={setTimeDeduction} />\n\n            {/* условное обозначение */}\n            <div className=\"legend\">\n                <div className=\"status-101\">Прерванный рабочий день</div>\n                <div className=\"status-102\">Не отмечен конец смены</div>\n            </div>\n\n            { !loading && columns &&(\n                <>\n                    <Table columns = { columns } data = { data.attendance_users_aggregate.nodes }/> \n                    <span className=\"reportMeta\">Отчет за {selectedMonth[0] + 1} месяц {selectedMonth[1]} года </span>\n\n                </>)}\n           \n\n        </>\n    )\n}\n\nexport default Attendance","import { useEffect, useState } from 'react';\nimport {Route, Redirect} from 'react-router-dom';\n\n\n\nconst PrivateRoute = ({component: Component, ...rest}) => {\n    const [isLoaded, setisLoaded] = useState(undefined);\n    const [isAuth, setisAuth] = useState(undefined);\n\n    async function checkAuth() {\n        const res = await rest.store.checkAuth();\n        setisAuth(res.isAuth);\n        setisLoaded(res.isLoaded)\n    }\n\n    useEffect(() => {\n        if (localStorage.getItem('token')) checkAuth()\n        else window.location.href='/login'\n      }, [])\n\n  return(\n    <Route\n      {...rest}\n      render={props => {\n        if (isLoaded){\n            if (isAuth){\n                console.log('PrivateRoute: return a component')\n                return <Component {...props} />\n            } else {\n               return <Redirect to='/login'/>;\n            }\n           \n        } else {\n            console.log('PrivateRoute: awaiting a response from checkAuth() ')\n        }\n    }}\n    />\n  )\n};\n\n\nexport default PrivateRoute;\n\n","import {BrowserRouter, Switch, Route, Redirect} from \"react-router-dom\";\n\nimport LoginForm from '../components/LoginForm';\nimport PriorityLayout from \"../components/PriorityLayout\";\nimport RecentlyLayout from \"../components/RecentlyLayout\"\nimport OrderLayout from \"../components/OrderLayout\";\nimport Attendance from '../components/Attendance'\nimport PrivateRoute from \"./PrivateRoute\";\n\n\n\nconst AppRouter = (props) => {\n\n    return(\n        <Switch>\n            <Route path=\"/login\" component={LoginForm}/>\n            <PrivateRoute exact path='/' component={PriorityLayout} store={props.store}/>\n            <PrivateRoute path='/recently' component={RecentlyLayout} store={props.store}/>\n            <PrivateRoute path='/attendance' component={Attendance} store={props.store}/>\n\n\n            <PrivateRoute path='/order/:id' component={OrderLayout} store={props.store}/>\n\n            #if required route was not found\n            <Redirect to=\"/\" />\n\n            {/* <PrivateRoute path='/recently' component={() => <PriorityLayout props={isRecently}/>} store={props.store}/> */}\n        </Switch>\n    )\n    \n};\n\nexport default AppRouter;","import { useContext } from 'react';\nimport { Context } from '../../index';\n\nimport { Pane } from 'evergreen-ui';\n\nimport AppRouter from '../../routers/Router';\n\n\nconst BaseLayout = (props) => {\n    const {store} = useContext(Context);\n    \n\n    return(\n        <>\n            <Pane className=\"base-container\">\n                \n                    <AppRouter store={store} /> \n                    {props.children}\n            </Pane>\n        </>\n    )\n}   \n\nexport default BaseLayout;","import { useEffect, useState } from \"react\"\nimport { useMediaQuery } from \"react-responsive\"\nimport { UilMoon, UilSun} from '@iconscout/react-unicons';\n\n  const DARK_CLASS = \"dark\";\n\nexport const DarkToggle = (props) => {\n\n    const systemPrefersDark = useMediaQuery(\n        {\n            query: \"(prefers-color-scheme: dark)\"\n        },\n        undefined,\n        prefersDark => {\n        setIsDark(prefersDark);\n        }\n    );\n\n    const [isDark, setIsDark] = useState(systemPrefersDark);\n\n\n    useEffect(() => {\n        if (isDark) document.documentElement.classList.add(DARK_CLASS)\n        else document.documentElement.classList.remove(DARK_CLASS)\n        \n    }, [isDark]);\n\n\n    if (props.display == 'none') return null\n    return (<>\n\n        <div  className=\"DarkToggle \" onClick={() => setIsDark(!isDark)} >{isDark? < UilSun/> : <UilMoon/>}</div>\n        \n        </>);\n};\n","// import { observer } from 'mobx-react-lite';\nimport { useContext } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { Context } from '../../index';\n\nimport { Pane } from 'evergreen-ui';\nimport './index.sass';\nimport { UilSortAmountDown, UilEnvelopeInfo, UilWrench, UilUserCircle, UilSignInAlt, UilConstructor} from '@iconscout/react-unicons';\nimport { DarkToggle } from './DarkToggle';\n\nconst Sidebar = () => {\n    const {store} = useContext(Context);\n\n    return(\n        <>\n        <Pane className='Sidebar'>\n\n            <NavLink  exact  to='/' activeClassName='sidebar-active' className=\"action-icon\"><UilSortAmountDown/></NavLink>\n            <NavLink  to='/recently' activeClassName='sidebar-active' className=\"action-icon\"><UilEnvelopeInfo/></NavLink>\n            <NavLink  to='/reclamation' activeClassName='sidebar-active' className=\"action-icon\"><UilWrench/></NavLink>\n            <NavLink  to='/attendance' activeClassName='sidebar-active' className=\"action-icon\"><UilConstructor/></NavLink>\n\n\n           <a className=\"action-icon\" ><DarkToggle/></a> \n            <NavLink  className=\"action-icon\" to='/account'><UilUserCircle/></NavLink>\n            <NavLink  className=\"action-icon\" to='/login' onClick={() => store.logout()}><UilSignInAlt/></NavLink>\n\n\n\n        </Pane>\n        </>\n    );\n}\n\nexport default Sidebar;","import { useContext } from 'react';\nimport { Context } from './index';\n\n// import ReactTooltip from 'react-tooltip';\nimport {observer} from 'mobx-react-lite';\n\nimport BaseLayout from './components/BaseLayout';\nimport Sidebar from './components/Sidebar/Sidebar';\nimport { DarkToggle } from './components/Sidebar/DarkToggle';\n\nfunction App() {  \n  const {store} = useContext(Context);\n\n\n  return (\n    <>\n      <div className=\"App\">\n        \n        {store.isAuth\n        ? <Sidebar/>\n        : null}\n\n          <DarkToggle display='none'/>\n          <BaseLayout/>\n        \n      </div>\n      {/* <ReactTooltip id='global' type=\"light\" place=\"bottom\" delayShow={300} className='tooltip'/> */}\n    </>\n  );\n}\n\nexport default observer(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from 'axios';\n\nexport const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:9000/api'\nexport const S3_URL = 'http://localhost:9000/upload'\n\nconst $api = axios.create({\n    withCredentials: true,\n    baseURL: API_URL\n});\n\n$api.interceptors.request.use( (config) => {\n    config.headers.Authorization = `Bearer ${localStorage.getItem('token')}`\n    return config;\n})\n$api.interceptors.response.use( (config) => {\n    return config;\n}, async (error) => {\n    const originalRequest = error.config;\n    if(error.response.status === 401 && error.config && !error.config._isRetry){\n        originalRequest._isRetry = true;\n        try {\n            const response =  await axios.get(`${API_URL}/refresh`, {withCredentials: true});\n            localStorage.setItem('token', response.data.accessToken);\n            return $api.request(originalRequest);\n        } catch (e) {\n            console.log('Авторизация обломилась. Попробуйте снова');\n        }\n    }\n       \n})\n\nexport default $api;","import $api from \"../http\";\n\nexport default class AuthService {\n    \n    static async login(email, password){\n        return $api.post('/login',  {email, password})\n    }\n\n    static async logout(){\n        return $api.post('/logout')\n    }\n\n}","import {makeAutoObservable} from 'mobx';\nimport {Pane, Spinner} from 'evergreen-ui';\nimport AuthService from '../services/AuthService';\nimport axios from 'axios';\nimport { API_URL } from '../http';\n\nimport { UilSortAmountDown, UilEnvelopeInfo, UilWrench, UilConstructor} from '@iconscout/react-unicons';\n\n\n\n\nexport default class Store {\n    user = {};\n    isAuth = false;\n    isLoading = false;\n\n    constructor(){\n        makeAutoObservable(this);\n        \n    }\n\n    setAuth(bool){\n        this.isAuth = bool;\n    }\n\n    setUser(user){\n        this.user = user;\n    }\n\n    setLoading(bool){\n        this.isLoading = bool;\n    }\n\n\n    async login(email, password){\n        try {\n            const response = await AuthService.login(email, password);\n            localStorage.setItem('token', response.data.accessToken);\n            this.setUser(response.data.user);\n            this.setAuth(true);\n            window.location.href='/';\n        } catch (e) {\n            console.log(e.response?.data?.message);\n        }\n    }\n\n    async logout(){\n        try {\n            await AuthService.logout();\n            localStorage.removeItem('token');\n            this.setAuth(false);\n            this.setUser({});\n        } catch (e) {\n            console.log(e.response?.data?.message);\n            \n        }\n    }\n\n    async checkAuth() {\n        this.setLoading(true);\n        try {\n            const response = await axios.get(`${API_URL}/refresh`, {withCredentials: true});\n            localStorage.setItem('token', response.data.accessToken);\n            this.setUser(response.data.user);\n            this.setAuth(true);\n\n            return {\n                'isLoaded': true,\n                 'isAuth': this.isAuth\n                }\n        } catch (e) {\n            console.log(e.response?.data?.message);\n            return {\n                'isLoaded': true,\n                'isAuth': this.isAuth\n            }\n\n        } finally {\n            this.setLoading(false);\n        }\n        \n    }\n\n    async uploadFile(formData){\n        const response = await axios.post(`http://localhost:9000/api/s3-upload`, formData, {\n            headers: {\n              \"Content-Type\": \"multipart/form-data\",\n            }\n          });\n        console.log(response)\n    }\n\n\n    pageParams = [\n        {\n            'url' : '/',\n            'icon': <UilSortAmountDown/>,\n            'title': 'Очередность выполнения',\n        },\n        {\n            'url' : '/recently',\n            'icon': <UilEnvelopeInfo/>,\n            'title': 'Новые заказы',\n        },\n        {\n            'url' : '/reclamation',\n            'icon': <UilWrench/>,\n            'title': 'Рекламация',\n        },\n        {\n            'url' : '/attendance',\n            'icon': <UilConstructor/>,\n            'title': 'Рабочее время',\n        },\n    ];\n\n    getPageParams(url){\n        const page = this.pageParams.find((el) => el.url === url)\n        return page\n    }\n\n    preloader = <Pane display=\"flex\" alignItems=\"center\" justifyContent=\"center\" height='75vh'><Spinner /></Pane>\n}\n","import {WebSocketLink} from 'apollo-link-ws';\nimport React, { createContext } from 'react';\nimport ReactDOM from 'react-dom';\nimport './theme.css';\nimport './index.sass';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Store from './store/store';\nimport 'react-notifications/lib/notifications.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n} from \"@apollo/client\";\n\nconst store = new Store();\n\nexport const Context = createContext({\n  store,\n});\n\nconst createApolloClient = () => {\n  return new ApolloClient({\n    link: new WebSocketLink({\n      uri: process.env.REACT_APP_HASURA_WS,\n      options: {\n        reconnect: true,\n        connectionParams: {\n          headers: {\n            'x-hasura-admin-secret': '44UL1UoEAr'\n          }\n        }\n      }\n    }),\n    cache: new InMemoryCache()\n  });\n};\n\nconst root = document.getElementById('root');\n\nReactDOM.render(\n  \n  \n  <ApolloProvider client={createApolloClient()}>\n    <BrowserRouter>\n      <App sessionData={root.dataset.session}>\n        <Context.Provider value={store}>\n        \n        </Context.Provider>\n      \n    </App>\n    </BrowserRouter>\n    </ApolloProvider>\n,\n  root\n);\n\nreportWebVitals();\n"],"sourceRoot":""}